"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/firebase-utils.ts":
/*!***********************************!*\
  !*** ./src/lib/firebase-utils.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUserProfile: function() { return /* binding */ createUserProfile; },\n/* harmony export */   deleteUserProfile: function() { return /* binding */ deleteUserProfile; },\n/* harmony export */   getAllUsers: function() { return /* binding */ getAllUsers; },\n/* harmony export */   getExams: function() { return /* binding */ getExams; },\n/* harmony export */   getTimetableSessions: function() { return /* binding */ getTimetableSessions; },\n/* harmony export */   getUserProfile: function() { return /* binding */ getUserProfile; },\n/* harmony export */   isUsernameAvailable: function() { return /* binding */ isUsernameAvailable; },\n/* harmony export */   saveExams: function() { return /* binding */ saveExams; },\n/* harmony export */   saveTimetableSessions: function() { return /* binding */ saveTimetableSessions; },\n/* harmony export */   testFirebaseConnection: function() { return /* binding */ testFirebaseConnection; },\n/* harmony export */   testFirestoreWrite: function() { return /* binding */ testFirestoreWrite; },\n/* harmony export */   updateUserProfile: function() { return /* binding */ updateUserProfile; },\n/* harmony export */   verifyUserDataSeparation: function() { return /* binding */ verifyUserDataSeparation; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n\n\n// Create or update user profile\nconst createUserProfile = async (user, username)=>{\n    try {\n        console.log(\"=== CREATE USER PROFILE ===\");\n        console.log(\"⚠️ WARNING: Creating new user profile - this will overwrite existing data!\");\n        console.log(\"User:\", user.email, \"UID:\", user.uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return null;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", user.uid);\n        console.log(\"User document reference created\");\n        // Check if profile already exists\n        const existingProfile = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (existingProfile.exists()) {\n            console.log(\"⚠️ WARNING: Profile already exists! Not creating new profile.\");\n            console.log(\"Existing profile data:\", existingProfile.data());\n            return existingProfile.data();\n        }\n        console.log(\"✅ No existing profile found, proceeding with creation...\");\n        // Default achievements\n        const defaultAchievements = [\n            {\n                id: \"first-mission\",\n                name: \"First Steps\",\n                description: \"Complete your first mission\",\n                icon: \"\\uD83C\\uDFAF\",\n                unlocked: false\n            },\n            {\n                id: \"streak-7\",\n                name: \"Week Warrior\",\n                description: \"Maintain a 7-day streak\",\n                icon: \"\\uD83D\\uDD25\",\n                unlocked: false\n            },\n            {\n                id: \"level-10\",\n                name: \"Scholar\",\n                description: \"Reach level 10\",\n                icon: \"\\uD83C\\uDF93\",\n                unlocked: false\n            },\n            {\n                id: \"xp-1000\",\n                name: \"Knowledge Seeker\",\n                description: \"Earn 1000 XP\",\n                icon: \"⭐\",\n                unlocked: false\n            }\n        ];\n        // Default powerUps\n        const defaultPowerUps = [\n            {\n                id: \"study-buddy\",\n                name: \"Study Buddy\",\n                description: \"Get a study partner for 30 minutes - reduces mission duration by 25%\",\n                effect: \"duration-reduction\",\n                cooldown: 12,\n                lastUsed: null,\n                active: false\n            },\n            {\n                id: \"xp-boost\",\n                name: \"XP Boost\",\n                description: \"Double XP for next 3 missions\",\n                effect: \"xp-boost\",\n                cooldown: 12,\n                lastUsed: null,\n                active: false\n            },\n            {\n                id: \"time-freeze\",\n                name: \"Time Freeze\",\n                description: \"Extend deadline by 24 hours\",\n                effect: \"deadline-extension\",\n                cooldown: 48,\n                lastUsed: null,\n                active: false\n            }\n        ];\n        const userProfile = {\n            uid: user.uid,\n            username,\n            email: user.email || \"\",\n            displayName: user.displayName || username,\n            xp: 0,\n            level: 1,\n            streak: 0,\n            achievements: defaultAchievements,\n            powerUps: defaultPowerUps,\n            missions: [],\n            exams: [],\n            timetable: [],\n            createdAt: new Date().toISOString(),\n            lastLoginDate: new Date().toISOString(),\n            isOnboarded: false\n        };\n        console.log(\"About to save user profile:\", userProfile);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(userRef, userProfile);\n        console.log(\"✅ User profile created successfully for:\", user.email);\n        return userProfile;\n    } catch (error) {\n        console.error(\"❌ Error creating user profile:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return null;\n    }\n};\n// Get user profile\nconst getUserProfile = async (uid)=>{\n    try {\n        console.log(\"=== GET USER PROFILE ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return null;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        console.log(\"User document reference created\");\n        const userSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        console.log(\"Document snapshot retrieved\");\n        if (userSnap.exists()) {\n            var _data_missions, _data_achievements;\n            const data = userSnap.data();\n            console.log(\"✅ User profile found for:\", data.email);\n            console.log(\"Profile data:\", {\n                xp: data.xp,\n                level: data.level,\n                missions: ((_data_missions = data.missions) === null || _data_missions === void 0 ? void 0 : _data_missions.length) || 0,\n                achievements: ((_data_achievements = data.achievements) === null || _data_achievements === void 0 ? void 0 : _data_achievements.length) || 0\n            });\n            return data;\n        } else {\n            console.log(\"❌ No user profile found for UID:\", uid);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"❌ Error getting user profile:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return null;\n    }\n};\n// Update user profile\nconst updateUserProfile = async (uid, updates)=>{\n    try {\n        console.log(\"=== UPDATE USER PROFILE ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Updates:\", updates);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        console.log(\"User document reference created\");\n        const updateData = {\n            ...updates,\n            lastLoginDate: new Date().toISOString()\n        };\n        console.log(\"About to update with data:\", updateData);\n        console.log(\"Data being sent to Firebase:\", JSON.stringify(updateData, null, 2));\n        // Check if document exists before updating\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (docSnap.exists()) {\n            console.log(\"✅ Document exists, proceeding with update\");\n        } else {\n            console.log(\"❌ Document does not exist, cannot update\");\n            return;\n        }\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(userRef, updateData);\n        console.log(\"✅ User profile updated successfully for UID:\", uid);\n        // Verify the update by reading back the data\n        console.log(\"Verifying update by reading back data...\");\n        const verifySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (verifySnap.exists()) {\n            var _verifyData_missions, _verifyData_achievements;\n            const verifyData = verifySnap.data();\n            console.log(\"✅ Verification successful - data in Firebase:\", {\n                xp: verifyData.xp,\n                level: verifyData.level,\n                missionsCount: ((_verifyData_missions = verifyData.missions) === null || _verifyData_missions === void 0 ? void 0 : _verifyData_missions.length) || 0,\n                achievementsCount: ((_verifyData_achievements = verifyData.achievements) === null || _verifyData_achievements === void 0 ? void 0 : _verifyData_achievements.length) || 0\n            });\n            console.log(\"Full verified data:\", verifyData);\n        } else {\n            console.log(\"❌ Verification failed - document not found\");\n        }\n    } catch (error) {\n        console.error(\"❌ Error updating user profile:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n    }\n};\n// Check if username is available\nconst isUsernameAvailable = async (username)=>{\n    try {\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"Firestore not initialized\");\n            return true;\n        }\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\");\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"username\", \"==\", username));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return querySnapshot.empty;\n    } catch (error) {\n        console.error(\"Error checking username availability:\", error);\n        return true;\n    }\n};\n// Save timetable sessions\nconst saveTimetableSessions = async (uid, sessions)=>{\n    try {\n        console.log(\"=== SAVE TIMETABLE SESSIONS ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Sessions count:\", sessions.length);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        console.log(\"User document reference created\");\n        const updateData = {\n            timetable: sessions,\n            lastLoginDate: new Date().toISOString()\n        };\n        console.log(\"About to save timetable data:\", updateData);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(userRef, updateData);\n        console.log(\"✅ Timetable sessions saved successfully for UID:\", uid);\n        // Verify the save by reading back the data\n        console.log(\"Verifying timetable save...\");\n        const verifySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (verifySnap.exists()) {\n            var _verifyData_timetable;\n            const verifyData = verifySnap.data();\n            console.log(\"✅ Timetable verification successful - sessions in Firebase:\", ((_verifyData_timetable = verifyData.timetable) === null || _verifyData_timetable === void 0 ? void 0 : _verifyData_timetable.length) || 0);\n        } else {\n            console.log(\"❌ Timetable verification failed - document not found\");\n        }\n    } catch (error) {\n        console.error(\"❌ Error saving timetable sessions:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n    }\n};\n// Get timetable sessions\nconst getTimetableSessions = async (uid)=>{\n    try {\n        console.log(\"=== GET TIMETABLE SESSIONS ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return [];\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userProfile = await getUserProfile(uid);\n        const sessions = (userProfile === null || userProfile === void 0 ? void 0 : userProfile.timetable) || [];\n        console.log(\"✅ Retrieved\", sessions.length, \"timetable sessions for UID:\", uid);\n        return sessions;\n    } catch (error) {\n        console.error(\"❌ Error getting timetable sessions:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return [];\n    }\n};\n// Save exams\nconst saveExams = async (uid, exams)=>{\n    try {\n        console.log(\"=== SAVE EXAMS ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Exams count:\", exams.length);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        console.log(\"User document reference created\");\n        const updateData = {\n            exams: exams,\n            lastLoginDate: new Date().toISOString()\n        };\n        console.log(\"About to save exams data:\", updateData);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(userRef, updateData);\n        console.log(\"✅ Exams saved successfully for UID:\", uid);\n        // Verify the save by reading back the data\n        console.log(\"Verifying exams save...\");\n        const verifySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(userRef);\n        if (verifySnap.exists()) {\n            var _verifyData_exams;\n            const verifyData = verifySnap.data();\n            console.log(\"✅ Exams verification successful - exams in Firebase:\", ((_verifyData_exams = verifyData.exams) === null || _verifyData_exams === void 0 ? void 0 : _verifyData_exams.length) || 0);\n        } else {\n            console.log(\"❌ Exams verification failed - document not found\");\n        }\n    } catch (error) {\n        console.error(\"❌ Error saving exams:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n    }\n};\n// Get exams\nconst getExams = async (uid)=>{\n    try {\n        console.log(\"=== GET EXAMS ===\");\n        console.log(\"UID:\", uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return [];\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const userProfile = await getUserProfile(uid);\n        const exams = (userProfile === null || userProfile === void 0 ? void 0 : userProfile.exams) || [];\n        console.log(\"✅ Retrieved\", exams.length, \"exams for UID:\", uid);\n        return exams;\n    } catch (error) {\n        console.error(\"❌ Error getting exams:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return [];\n    }\n};\n// Verify user data separation\nconst verifyUserDataSeparation = async (uid)=>{\n    try {\n        const userProfile = await getUserProfile(uid);\n        if (!userProfile) {\n            console.log(\"No user profile found for verification\");\n            return false;\n        }\n        console.log(\"User data verification for:\", userProfile.email);\n        console.log(\"- UID:\", userProfile.uid);\n        console.log(\"- XP:\", userProfile.xp);\n        console.log(\"- Level:\", userProfile.level);\n        console.log(\"- Missions count:\", userProfile.missions.length);\n        console.log(\"- Achievements count:\", userProfile.achievements.length);\n        return true;\n    } catch (error) {\n        console.error(\"Error verifying user data:\", error);\n        return false;\n    }\n};\n// Get all users for debugging\nconst getAllUsers = async ()=>{\n    try {\n        console.log(\"=== GET ALL USERS ===\");\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return [];\n        }\n        console.log(\"✅ Firestore is initialized\");\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\");\n        console.log(\"Users collection reference created\");\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(usersRef);\n        console.log(\"Query snapshot retrieved, docs count:\", querySnapshot.size);\n        const users = [];\n        querySnapshot.forEach((doc)=>{\n            var _data_missions;\n            const data = doc.data();\n            users.push(data);\n            console.log(\"User found:\", data.email, \"XP:\", data.xp, \"Missions:\", ((_data_missions = data.missions) === null || _data_missions === void 0 ? void 0 : _data_missions.length) || 0);\n        });\n        console.log(\"✅ Retrieved\", users.length, \"users\");\n        return users;\n    } catch (error) {\n        console.error(\"❌ Error getting all users:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return [];\n    }\n};\n// Delete user profile (for testing)\nconst deleteUserProfile = async (uid)=>{\n    try {\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"Firestore not initialized\");\n            return false;\n        }\n        const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(userRef);\n        console.log(\"User profile deleted successfully\");\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting user profile:\", error);\n        return false;\n    }\n};\n// Test Firebase connection and permissions\nconst testFirebaseConnection = async (uid)=>{\n    try {\n        console.log(\"=== TEST FIREBASE CONNECTION ===\");\n        console.log(\"Testing with UID:\", uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return false;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        // Try to read from users collection\n        const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\");\n        console.log(\"Users collection reference created\");\n        // Try to get a document (this will test read permissions)\n        const testDoc = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"users\", uid);\n        const testSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(testDoc);\n        console.log(\"✅ Read test successful\");\n        // Try to write a test document (this will test write permissions)\n        const testWriteRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"test\", \"connection-test\");\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(testWriteRef, {\n            test: true,\n            timestamp: new Date().toISOString(),\n            uid: uid\n        });\n        console.log(\"✅ Write test successful\");\n        // Clean up test document\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(testWriteRef);\n        console.log(\"✅ Cleanup successful\");\n        console.log(\"✅ Firebase connection test passed\");\n        return true;\n    } catch (error) {\n        console.error(\"❌ Firebase connection test failed:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        return false;\n    }\n};\n// Simple test to verify Firestore write permissions\nconst testFirestoreWrite = async (uid)=>{\n    try {\n        console.log(\"=== TEST FIRESTORE WRITE ===\");\n        console.log(\"Testing write with UID:\", uid);\n        console.log(\"Firestore db:\", !!_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.db) {\n            console.error(\"❌ Firestore not initialized\");\n            return false;\n        }\n        console.log(\"✅ Firestore is initialized\");\n        // Try to write a test document\n        const testRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"test\", uid);\n        const testData = {\n            test: true,\n            timestamp: new Date().toISOString(),\n            uid: uid,\n            message: \"This is a test write\"\n        };\n        console.log(\"Writing test data:\", testData);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(testRef, testData);\n        console.log(\"✅ Write test successful\");\n        // Try to read it back\n        const testSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(testRef);\n        if (testSnap.exists()) {\n            console.log(\"✅ Read test successful\");\n            console.log(\"Read data:\", testSnap.data());\n        } else {\n            console.log(\"❌ Read test failed - document not found\");\n        }\n        // Clean up\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)(testRef);\n        console.log(\"✅ Cleanup successful\");\n        console.log(\"✅ Firestore write test passed\");\n        return true;\n    } catch (error) {\n        console.error(\"❌ Firestore write test failed:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n        });\n        // Check for specific error types\n        if (error.code === \"permission-denied\") {\n            console.error(\"❌ Permission denied - check Firebase security rules\");\n        } else if (error.code === \"unavailable\") {\n            console.error(\"❌ Firestore unavailable - check network connection\");\n        }\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase-utils.ts\n"));

/***/ })

});