"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/store/gameStore.ts":
/*!********************************!*\
  !*** ./src/store/gameStore.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameStore: function() { return /* binding */ useGameStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var _lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase-utils */ \"(app-pages-browser)/./src/lib/firebase-utils.ts\");\n\n\nconst useGameStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((set, get)=>({\n        userId: null,\n        xp: 0,\n        level: 1,\n        streak: 0,\n        isLoading: false,\n        powerUps: [\n            {\n                id: \"streak-revival\",\n                name: \"Streak Revival\",\n                description: \"Restore your streak to its previous level once\",\n                effect: \"streak-revival\",\n                cooldown: 0,\n                lastUsed: null,\n                active: false,\n                used: false,\n                oneTimeUse: true\n            },\n            {\n                id: \"xp-boost\",\n                name: \"XP Boost\",\n                description: \"Double XP for next 3 missions\",\n                effect: \"xp-boost\",\n                cooldown: 0,\n                lastUsed: null,\n                active: false,\n                used: false,\n                oneTimeUse: true\n            },\n            {\n                id: \"time-freeze\",\n                name: \"Time Freeze\",\n                description: \"Extend deadline by 24 hours\",\n                effect: \"deadline-extension\",\n                cooldown: 0,\n                lastUsed: null,\n                active: false,\n                used: false,\n                oneTimeUse: true\n            }\n        ],\n        achievements: [\n            {\n                id: \"first-mission\",\n                name: \"First Steps\",\n                description: \"Complete your first mission\",\n                icon: \"\\uD83C\\uDFAF\",\n                unlocked: false\n            },\n            {\n                id: \"streak-7\",\n                name: \"Week Warrior\",\n                description: \"Maintain a 7-day streak\",\n                icon: \"\\uD83D\\uDD25\",\n                unlocked: false\n            },\n            {\n                id: \"level-10\",\n                name: \"Scholar\",\n                description: \"Reach level 10\",\n                icon: \"\\uD83C\\uDF93\",\n                unlocked: false\n            },\n            {\n                id: \"xp-1000\",\n                name: \"Knowledge Seeker\",\n                description: \"Earn 1000 XP\",\n                icon: \"⭐\",\n                unlocked: false\n            }\n        ],\n        missions: [],\n        exams: [],\n        timetable: [],\n        setUserId: async (userId)=>{\n            const currentUserId = get().userId;\n            console.log(\"=== SET USER ID ===\");\n            console.log(\"Current user ID:\", currentUserId);\n            console.log(\"New user ID:\", userId);\n            if (currentUserId !== userId) {\n                console.log(\"\\uD83D\\uDD04 Switching user from\", currentUserId, \"to\", userId);\n                // Save current user data before switching\n                if (currentUserId) {\n                    console.log(\"\\uD83D\\uDCBE Saving data for previous user:\", currentUserId);\n                    await get().saveUserData();\n                    console.log(\"✅ Saved data for previous user:\", currentUserId);\n                }\n                // Reset state for new user\n                console.log(\"\\uD83D\\uDD04 Resetting state for new user\");\n                set({\n                    userId,\n                    xp: 0,\n                    level: 1,\n                    streak: 0,\n                    missions: [],\n                    isLoading: true\n                });\n                // Load new user data if provided\n                if (userId) {\n                    console.log(\"\\uD83D\\uDCE5 Loading data for new user:\", userId);\n                    await get().loadUserData(userId);\n                }\n                set({\n                    isLoading: false\n                });\n                console.log(\"✅ User ID set successfully\");\n            } else {\n                console.log(\"⚠️ Same user ID, no change needed\");\n            }\n        },\n        setXP: (xp)=>{\n            set({\n                xp\n            });\n            get().saveUserData();\n        },\n        addXP: (amount)=>{\n            const { xp, level } = get();\n            const newXP = xp + amount;\n            const newLevel = Math.floor(newXP / 100) + 1;\n            console.log(\"⭐ Adding XP:\", amount, \"New XP:\", newXP, \"New Level:\", newLevel);\n            set({\n                xp: newXP,\n                level: newLevel\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after adding XP...\");\n            get().saveUserData();\n        },\n        setLevel: (level)=>{\n            set({\n                level\n            });\n            get().saveUserData();\n        },\n        setStreak: (streak)=>{\n            set({\n                streak\n            });\n            get().saveUserData();\n        },\n        activatePowerUp: (powerUpId)=>{\n            const { powerUps } = get();\n            const updatedPowerUps = powerUps.map((powerUp)=>powerUp.id === powerUpId ? {\n                    ...powerUp,\n                    active: true,\n                    lastUsed: new Date().toISOString()\n                } : powerUp);\n            set({\n                powerUps: updatedPowerUps\n            });\n            get().saveUserData();\n        },\n        unlockAchievement: (achievementId)=>{\n            const { achievements } = get();\n            const updatedAchievements = achievements.map((achievement)=>achievement.id === achievementId ? {\n                    ...achievement,\n                    unlocked: true,\n                    unlockedAt: new Date().toISOString()\n                } : achievement);\n            set({\n                achievements: updatedAchievements\n            });\n            get().saveUserData();\n        },\n        addMission: (mission)=>{\n            const { missions } = get();\n            const calculateXP = (duration, priority)=>{\n                const baseXP = duration * 2; // 2 XP per minute\n                const priorityMultiplier = {\n                    \"low\": 0.8,\n                    \"medium\": 1.0,\n                    \"high\": 1.5\n                };\n                return Math.round(baseXP * priorityMultiplier[priority]);\n            };\n            const newMission = {\n                ...mission,\n                id: Date.now().toString(),\n                xpValue: calculateXP(mission.duration, mission.priority),\n                createdAt: new Date().toISOString()\n            };\n            console.log(\"\\uD83C\\uDFAF Adding mission:\", newMission);\n            set({\n                missions: [\n                    ...missions,\n                    newMission\n                ]\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after adding mission...\");\n            get().saveUserData();\n        },\n        completeMission: (missionId)=>{\n            const { missions, addXP, unlockAchievement } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && !mission.completed) {\n                    console.log(\"\\uD83C\\uDFAF Completing mission:\", mission.title, \"XP:\", mission.xpValue);\n                    addXP(mission.xpValue);\n                    // Check for first mission achievement\n                    const completedMissions = missions.filter((m)=>m.completed).length;\n                    if (completedMissions === 0) {\n                        unlockAchievement(\"first-mission\");\n                    }\n                    return {\n                        ...mission,\n                        completed: true,\n                        completedAt: new Date().toISOString()\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after completing mission...\");\n            get().saveUserData();\n        },\n        deleteMission: (missionId)=>{\n            const { missions } = get();\n            set({\n                missions: missions.filter((mission)=>mission.id !== missionId)\n            });\n            get().saveUserData();\n        },\n        startTimer: (missionId)=>{\n            const { missions } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && !mission.completed) {\n                    return {\n                        ...mission,\n                        timerActive: true,\n                        timerStartTime: new Date().toISOString(),\n                        timeRemaining: mission.timeRemaining || mission.duration // Use existing time or full duration\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            get().saveUserData();\n        },\n        stopTimer: (missionId)=>{\n            const { missions } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && mission.timerActive) {\n                    // Calculate remaining time when stopping\n                    const startTime = new Date(mission.timerStartTime);\n                    const currentTime = new Date();\n                    const elapsedSeconds = Math.floor((currentTime.getTime() - startTime.getTime()) / 1000);\n                    const remainingSeconds = Math.max(0, (mission.timeRemaining || mission.duration) * 60 - elapsedSeconds);\n                    const remainingMinutes = Math.floor(remainingSeconds / 60);\n                    return {\n                        ...mission,\n                        timerActive: false,\n                        timeRemaining: remainingMinutes\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            get().saveUserData();\n        },\n        checkDeadlines: ()=>{\n            const { missions, addXP } = get();\n            const now = new Date();\n            let hasOverdueMissions = false;\n            const updatedMissions = missions.map((mission)=>{\n                if (!mission.completed && !mission.overdue) {\n                    const deadline = new Date(mission.deadline);\n                    if (now > deadline) {\n                        hasOverdueMissions = true;\n                        // Penalty: remove 10% of mission XP\n                        const penalty = Math.round(mission.xpValue * 0.1);\n                        addXP(-penalty);\n                        // Show notification\n                        if (\"Notification\" in window && Notification.permission === \"granted\") {\n                            new Notification(\"Mission Overdue!\", {\n                                body: \"\".concat(mission.title, \" is overdue! You lost \").concat(penalty, \" XP.\"),\n                                icon: \"/favicon.ico\"\n                            });\n                        }\n                        return {\n                            ...mission,\n                            overdue: true\n                        };\n                    }\n                }\n                return mission;\n            });\n            if (hasOverdueMissions) {\n                set({\n                    missions: updatedMissions\n                });\n                get().saveUserData();\n            }\n        },\n        addExam: (exam)=>{\n            const { exams, userId } = get();\n            const newExam = {\n                ...exam,\n                id: Date.now().toString(),\n                createdAt: new Date().toISOString()\n            };\n            console.log(\"\\uD83D\\uDCDA Adding exam:\", newExam);\n            const updatedExams = [\n                ...exams,\n                newExam\n            ];\n            set({\n                exams: updatedExams\n            });\n            // Save to Firebase immediately\n            if (userId) {\n                (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveExams)(userId, updatedExams);\n            }\n            get().saveUserData();\n        },\n        deleteExam: (examId)=>{\n            const { exams, userId } = get();\n            const updatedExams = exams.filter((exam)=>exam.id !== examId);\n            set({\n                exams: updatedExams\n            });\n            // Save to Firebase immediately\n            if (userId) {\n                (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveExams)(userId, updatedExams);\n            }\n            get().saveUserData();\n        },\n        saveTimetableSessions: async (sessions)=>{\n            console.log(\"\\uD83D\\uDCC5 Saving timetable sessions to store:\", sessions);\n            set({\n                timetable: sessions\n            });\n            console.log(\"\\uD83D\\uDCBE Calling saveUserData for timetable...\");\n            await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveTimetableSessions)(get().userId, sessions);\n            console.log(\"✅ Timetable sessions saved to Firebase\");\n        },\n        loadUserData: async (userId)=>{\n            try {\n                console.log(\"=== LOAD USER DATA ===\");\n                console.log(\"User ID:\", userId);\n                set({\n                    isLoading: true\n                });\n                const userProfile = await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.getUserProfile)(userId);\n                if (userProfile) {\n                    var _userProfile_missions, _userProfile_achievements;\n                    console.log(\"✅ User profile found:\", userProfile);\n                    console.log(\"Profile data:\", {\n                        xp: userProfile.xp,\n                        level: userProfile.level,\n                        missions: ((_userProfile_missions = userProfile.missions) === null || _userProfile_missions === void 0 ? void 0 : _userProfile_missions.length) || 0,\n                        achievements: ((_userProfile_achievements = userProfile.achievements) === null || _userProfile_achievements === void 0 ? void 0 : _userProfile_achievements.length) || 0\n                    });\n                    console.log(\"Full user profile data:\", {\n                        xp: userProfile.xp,\n                        level: userProfile.level,\n                        streak: userProfile.streak,\n                        missions: userProfile.missions,\n                        achievements: userProfile.achievements,\n                        powerUps: userProfile.powerUps\n                    });\n                    const loadedData = {\n                        userId,\n                        xp: userProfile.xp !== undefined ? userProfile.xp : 0,\n                        level: userProfile.level !== undefined ? userProfile.level : 1,\n                        streak: userProfile.streak !== undefined ? userProfile.streak : 0,\n                        powerUps: userProfile.powerUps || get().powerUps,\n                        achievements: userProfile.achievements || get().achievements,\n                        missions: userProfile.missions || [],\n                        exams: userProfile.exams || [],\n                        timetable: userProfile.timetable || [],\n                        isLoading: false\n                    };\n                    console.log(\"About to set game store with data:\", loadedData);\n                    set(loadedData);\n                    console.log(\"✅ User data loaded successfully for:\", userId);\n                } else {\n                    console.log(\"❌ No user profile found, initializing new user\");\n                    // Initialize new user with default data\n                    set({\n                        userId,\n                        xp: 0,\n                        level: 1,\n                        streak: 0,\n                        missions: [],\n                        isLoading: false\n                    });\n                    console.log(\"✅ New user initialized\");\n                }\n            } catch (error) {\n                console.error(\"❌ Error loading user data:\", error);\n                console.error(\"Error details:\", {\n                    message: error.message,\n                    code: error.code,\n                    stack: error.stack\n                });\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        saveUserData: async ()=>{\n            const { userId, xp, level, streak, powerUps, achievements, missions, exams, timetable } = get();\n            if (userId) {\n                try {\n                    console.log(\"=== SAVE USER DATA ===\");\n                    console.log(\"User ID:\", userId);\n                    console.log(\"Data to save:\", {\n                        xp,\n                        level,\n                        streak,\n                        missionsCount: missions.length,\n                        achievementsCount: achievements.length,\n                        powerUpsCount: powerUps.length\n                    });\n                    console.log(\"Full missions array:\", missions);\n                    console.log(\"Full achievements array:\", achievements);\n                    console.log(\"Full powerUps array:\", powerUps);\n                    const dataToSave = {\n                        xp,\n                        level,\n                        streak,\n                        powerUps,\n                        achievements,\n                        missions,\n                        exams,\n                        timetable\n                    };\n                    console.log(\"About to save this data:\", dataToSave);\n                    await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.updateUserProfile)(userId, dataToSave);\n                    console.log(\"✅ User data saved successfully for:\", userId);\n                } catch (error) {\n                    console.error(\"❌ Error saving user data:\", error);\n                    console.error(\"Error details:\", {\n                        message: error.message,\n                        code: error.code,\n                        stack: error.stack\n                    });\n                }\n            } else {\n                console.log(\"⚠️ No user ID, skipping save\");\n            }\n        },\n        resetUserData: ()=>{\n            set({\n                userId: null,\n                xp: 0,\n                level: 1,\n                streak: 0,\n                missions: [],\n                isLoading: false\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/gameStore.ts\n"));

/***/ })

});