"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/store/gameStore.ts":
/*!********************************!*\
  !*** ./src/store/gameStore.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useGameStore: function() { return /* binding */ useGameStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var _lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase-utils */ \"(app-pages-browser)/./src/lib/firebase-utils.ts\");\n\n\nconst useGameStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((set, get)=>({\n        userId: null,\n        xp: 0,\n        level: 1,\n        streak: 0,\n        isLoading: false,\n        powerUps: [\n            {\n                id: \"study-buddy\",\n                name: \"Study Buddy\",\n                description: \"Get a study partner for 30 minutes - reduces mission duration by 25%\",\n                effect: \"duration-reduction\",\n                cooldown: 12,\n                lastUsed: null,\n                active: false\n            },\n            {\n                id: \"xp-boost\",\n                name: \"XP Boost\",\n                description: \"Double XP for next 3 missions\",\n                effect: \"xp-boost\",\n                cooldown: 12,\n                lastUsed: null,\n                active: false\n            },\n            {\n                id: \"time-freeze\",\n                name: \"Time Freeze\",\n                description: \"Extend deadline by 24 hours\",\n                effect: \"deadline-extension\",\n                cooldown: 48,\n                lastUsed: null,\n                active: false\n            }\n        ],\n        achievements: [\n            {\n                id: \"first-mission\",\n                name: \"First Steps\",\n                description: \"Complete your first mission\",\n                icon: \"\\uD83C\\uDFAF\",\n                unlocked: false\n            },\n            {\n                id: \"streak-7\",\n                name: \"Week Warrior\",\n                description: \"Maintain a 7-day streak\",\n                icon: \"\\uD83D\\uDD25\",\n                unlocked: false\n            },\n            {\n                id: \"level-10\",\n                name: \"Scholar\",\n                description: \"Reach level 10\",\n                icon: \"\\uD83C\\uDF93\",\n                unlocked: false\n            },\n            {\n                id: \"xp-1000\",\n                name: \"Knowledge Seeker\",\n                description: \"Earn 1000 XP\",\n                icon: \"⭐\",\n                unlocked: false\n            }\n        ],\n        missions: [],\n        exams: [],\n        timetable: [],\n        setUserId: async (userId)=>{\n            const currentUserId = get().userId;\n            console.log(\"=== SET USER ID ===\");\n            console.log(\"Current user ID:\", currentUserId);\n            console.log(\"New user ID:\", userId);\n            if (currentUserId !== userId) {\n                console.log(\"\\uD83D\\uDD04 Switching user from\", currentUserId, \"to\", userId);\n                // Save current user data before switching\n                if (currentUserId) {\n                    console.log(\"\\uD83D\\uDCBE Saving data for previous user:\", currentUserId);\n                    await get().saveUserData();\n                    console.log(\"✅ Saved data for previous user:\", currentUserId);\n                }\n                // Reset state for new user\n                console.log(\"\\uD83D\\uDD04 Resetting state for new user\");\n                set({\n                    userId,\n                    xp: 0,\n                    level: 1,\n                    streak: 0,\n                    missions: [],\n                    isLoading: true\n                });\n                // Load new user data if provided\n                if (userId) {\n                    console.log(\"\\uD83D\\uDCE5 Loading data for new user:\", userId);\n                    await get().loadUserData(userId);\n                }\n                set({\n                    isLoading: false\n                });\n                console.log(\"✅ User ID set successfully\");\n            } else {\n                console.log(\"⚠️ Same user ID, no change needed\");\n            }\n        },\n        setXP: (xp)=>{\n            set({\n                xp\n            });\n            get().saveUserData();\n        },\n        addXP: (amount)=>{\n            const { xp, level } = get();\n            const newXP = xp + amount;\n            const newLevel = Math.floor(newXP / 100) + 1;\n            console.log(\"⭐ Adding XP:\", amount, \"New XP:\", newXP, \"New Level:\", newLevel);\n            set({\n                xp: newXP,\n                level: newLevel\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after adding XP...\");\n            get().saveUserData();\n        },\n        setLevel: (level)=>{\n            set({\n                level\n            });\n            get().saveUserData();\n        },\n        setStreak: (streak)=>{\n            set({\n                streak\n            });\n            get().saveUserData();\n        },\n        activatePowerUp: (powerUpId)=>{\n            const { powerUps } = get();\n            const updatedPowerUps = powerUps.map((powerUp)=>powerUp.id === powerUpId ? {\n                    ...powerUp,\n                    active: true,\n                    lastUsed: new Date().toISOString()\n                } : powerUp);\n            set({\n                powerUps: updatedPowerUps\n            });\n            get().saveUserData();\n        },\n        unlockAchievement: (achievementId)=>{\n            const { achievements } = get();\n            const updatedAchievements = achievements.map((achievement)=>achievement.id === achievementId ? {\n                    ...achievement,\n                    unlocked: true,\n                    unlockedAt: new Date().toISOString()\n                } : achievement);\n            set({\n                achievements: updatedAchievements\n            });\n            get().saveUserData();\n        },\n        addMission: (mission)=>{\n            const { missions } = get();\n            const calculateXP = (duration, priority)=>{\n                const baseXP = duration * 2; // 2 XP per minute\n                const priorityMultiplier = {\n                    \"low\": 0.8,\n                    \"medium\": 1.0,\n                    \"high\": 1.5\n                };\n                return Math.round(baseXP * priorityMultiplier[priority]);\n            };\n            const newMission = {\n                ...mission,\n                id: Date.now().toString(),\n                xpValue: calculateXP(mission.duration, mission.priority),\n                createdAt: new Date().toISOString()\n            };\n            console.log(\"\\uD83C\\uDFAF Adding mission:\", newMission);\n            set({\n                missions: [\n                    ...missions,\n                    newMission\n                ]\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after adding mission...\");\n            get().saveUserData();\n        },\n        completeMission: (missionId)=>{\n            const { missions, addXP, unlockAchievement } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && !mission.completed) {\n                    console.log(\"\\uD83C\\uDFAF Completing mission:\", mission.title, \"XP:\", mission.xpValue);\n                    addXP(mission.xpValue);\n                    // Check for first mission achievement\n                    const completedMissions = missions.filter((m)=>m.completed).length;\n                    if (completedMissions === 0) {\n                        unlockAchievement(\"first-mission\");\n                    }\n                    return {\n                        ...mission,\n                        completed: true,\n                        completedAt: new Date().toISOString()\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            console.log(\"\\uD83D\\uDCBE Saving data after completing mission...\");\n            get().saveUserData();\n        },\n        deleteMission: (missionId)=>{\n            const { missions } = get();\n            set({\n                missions: missions.filter((mission)=>mission.id !== missionId)\n            });\n            get().saveUserData();\n        },\n        startTimer: (missionId)=>{\n            const { missions } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && !mission.completed) {\n                    return {\n                        ...mission,\n                        timerActive: true,\n                        timerStartTime: new Date().toISOString(),\n                        timeRemaining: mission.timeRemaining || mission.duration // Use existing time or full duration\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            get().saveUserData();\n        },\n        stopTimer: (missionId)=>{\n            const { missions } = get();\n            const updatedMissions = missions.map((mission)=>{\n                if (mission.id === missionId && mission.timerActive) {\n                    // Calculate remaining time when stopping\n                    const startTime = new Date(mission.timerStartTime);\n                    const currentTime = new Date();\n                    const elapsedSeconds = Math.floor((currentTime.getTime() - startTime.getTime()) / 1000);\n                    const remainingSeconds = Math.max(0, (mission.timeRemaining || mission.duration) * 60 - elapsedSeconds);\n                    const remainingMinutes = Math.floor(remainingSeconds / 60);\n                    return {\n                        ...mission,\n                        timerActive: false,\n                        timeRemaining: remainingMinutes\n                    };\n                }\n                return mission;\n            });\n            set({\n                missions: updatedMissions\n            });\n            get().saveUserData();\n        },\n        checkDeadlines: ()=>{\n            const { missions, addXP } = get();\n            const now = new Date();\n            let hasOverdueMissions = false;\n            const updatedMissions = missions.map((mission)=>{\n                if (!mission.completed && !mission.overdue) {\n                    const deadline = new Date(mission.deadline);\n                    if (now > deadline) {\n                        hasOverdueMissions = true;\n                        // Penalty: remove 10% of mission XP\n                        const penalty = Math.round(mission.xpValue * 0.1);\n                        addXP(-penalty);\n                        // Show notification\n                        if (\"Notification\" in window && Notification.permission === \"granted\") {\n                            new Notification(\"Mission Overdue!\", {\n                                body: \"\".concat(mission.title, \" is overdue! You lost \").concat(penalty, \" XP.\"),\n                                icon: \"/favicon.ico\"\n                            });\n                        }\n                        return {\n                            ...mission,\n                            overdue: true\n                        };\n                    }\n                }\n                return mission;\n            });\n            if (hasOverdueMissions) {\n                set({\n                    missions: updatedMissions\n                });\n                get().saveUserData();\n            }\n        },\n        addExam: (exam)=>{\n            const { exams, userId } = get();\n            const newExam = {\n                ...exam,\n                id: Date.now().toString(),\n                createdAt: new Date().toISOString()\n            };\n            console.log(\"\\uD83D\\uDCDA Adding exam:\", newExam);\n            const updatedExams = [\n                ...exams,\n                newExam\n            ];\n            set({\n                exams: updatedExams\n            });\n            // Save to Firebase immediately\n            if (userId) {\n                (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveExams)(userId, updatedExams);\n            }\n            get().saveUserData();\n        },\n        deleteExam: (examId)=>{\n            const { exams, userId } = get();\n            const updatedExams = exams.filter((exam)=>exam.id !== examId);\n            set({\n                exams: updatedExams\n            });\n            // Save to Firebase immediately\n            if (userId) {\n                (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveExams)(userId, updatedExams);\n            }\n            get().saveUserData();\n        },\n        saveTimetableSessions: async (sessions)=>{\n            console.log(\"\\uD83D\\uDCC5 Saving timetable sessions to store:\", sessions);\n            set({\n                timetable: sessions\n            });\n            console.log(\"\\uD83D\\uDCBE Calling saveUserData for timetable...\");\n            await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.saveTimetableSessions)(get().userId, sessions);\n            console.log(\"✅ Timetable sessions saved to Firebase\");\n        },\n        loadUserData: async (userId)=>{\n            try {\n                console.log(\"=== LOAD USER DATA ===\");\n                console.log(\"User ID:\", userId);\n                set({\n                    isLoading: true\n                });\n                const userProfile = await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.getUserProfile)(userId);\n                if (userProfile) {\n                    var _userProfile_missions, _userProfile_achievements;\n                    console.log(\"✅ User profile found:\", userProfile);\n                    console.log(\"Profile data:\", {\n                        xp: userProfile.xp,\n                        level: userProfile.level,\n                        missions: ((_userProfile_missions = userProfile.missions) === null || _userProfile_missions === void 0 ? void 0 : _userProfile_missions.length) || 0,\n                        achievements: ((_userProfile_achievements = userProfile.achievements) === null || _userProfile_achievements === void 0 ? void 0 : _userProfile_achievements.length) || 0\n                    });\n                    console.log(\"Full user profile data:\", {\n                        xp: userProfile.xp,\n                        level: userProfile.level,\n                        streak: userProfile.streak,\n                        missions: userProfile.missions,\n                        achievements: userProfile.achievements,\n                        powerUps: userProfile.powerUps\n                    });\n                    const loadedData = {\n                        userId,\n                        xp: userProfile.xp !== undefined ? userProfile.xp : 0,\n                        level: userProfile.level !== undefined ? userProfile.level : 1,\n                        streak: userProfile.streak !== undefined ? userProfile.streak : 0,\n                        powerUps: userProfile.powerUps || get().powerUps,\n                        achievements: userProfile.achievements || get().achievements,\n                        missions: userProfile.missions || [],\n                        exams: userProfile.exams || [],\n                        timetable: userProfile.timetable || [],\n                        isLoading: false\n                    };\n                    console.log(\"About to set game store with data:\", loadedData);\n                    set(loadedData);\n                    console.log(\"✅ User data loaded successfully for:\", userId);\n                } else {\n                    console.log(\"❌ No user profile found, initializing new user\");\n                    // Initialize new user with default data\n                    set({\n                        userId,\n                        xp: 0,\n                        level: 1,\n                        streak: 0,\n                        missions: [],\n                        isLoading: false\n                    });\n                    console.log(\"✅ New user initialized\");\n                }\n            } catch (error) {\n                console.error(\"❌ Error loading user data:\", error);\n                console.error(\"Error details:\", {\n                    message: error.message,\n                    code: error.code,\n                    stack: error.stack\n                });\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        saveUserData: async ()=>{\n            const { userId, xp, level, streak, powerUps, achievements, missions, exams, timetable } = get();\n            if (userId) {\n                try {\n                    console.log(\"=== SAVE USER DATA ===\");\n                    console.log(\"User ID:\", userId);\n                    console.log(\"Data to save:\", {\n                        xp,\n                        level,\n                        streak,\n                        missionsCount: missions.length,\n                        achievementsCount: achievements.length,\n                        powerUpsCount: powerUps.length\n                    });\n                    console.log(\"Full missions array:\", missions);\n                    console.log(\"Full achievements array:\", achievements);\n                    console.log(\"Full powerUps array:\", powerUps);\n                    const dataToSave = {\n                        xp,\n                        level,\n                        streak,\n                        powerUps,\n                        achievements,\n                        missions,\n                        exams,\n                        timetable\n                    };\n                    console.log(\"About to save this data:\", dataToSave);\n                    await (0,_lib_firebase_utils__WEBPACK_IMPORTED_MODULE_0__.updateUserProfile)(userId, dataToSave);\n                    console.log(\"✅ User data saved successfully for:\", userId);\n                } catch (error) {\n                    console.error(\"❌ Error saving user data:\", error);\n                    console.error(\"Error details:\", {\n                        message: error.message,\n                        code: error.code,\n                        stack: error.stack\n                    });\n                }\n            } else {\n                console.log(\"⚠️ No user ID, skipping save\");\n            }\n        },\n        resetUserData: ()=>{\n            set({\n                userId: null,\n                xp: 0,\n                level: 1,\n                streak: 0,\n                missions: [],\n                isLoading: false\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zdG9yZS9nYW1lU3RvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBRTRIO0FBOER0SixNQUFNTyxlQUFlUCwrQ0FBTUEsR0FBYyxDQUFDUSxLQUFLQyxNQUFTO1FBQzdEQyxRQUFRO1FBQ1JDLElBQUk7UUFDSkMsT0FBTztRQUNQQyxRQUFRO1FBQ1JDLFdBQVc7UUFDWEMsVUFBVTtZQUNSO2dCQUNFQyxJQUFJO2dCQUNKQyxNQUFNO2dCQUNOQyxhQUFhO2dCQUNiQyxRQUFRO2dCQUNSQyxVQUFVO2dCQUNWQyxVQUFVO2dCQUNWQyxRQUFRO1lBQ1Y7WUFDQTtnQkFDRU4sSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkMsYUFBYTtnQkFDYkMsUUFBUTtnQkFDUkMsVUFBVTtnQkFDVkMsVUFBVTtnQkFDVkMsUUFBUTtZQUNWO1lBQ0E7Z0JBQ0VOLElBQUk7Z0JBQ0pDLE1BQU07Z0JBQ05DLGFBQWE7Z0JBQ2JDLFFBQVE7Z0JBQ1JDLFVBQVU7Z0JBQ1ZDLFVBQVU7Z0JBQ1ZDLFFBQVE7WUFDVjtTQUNEO1FBQ0RDLGNBQWM7WUFDWjtnQkFDRVAsSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkMsYUFBYTtnQkFDYk0sTUFBTTtnQkFDTkMsVUFBVTtZQUNaO1lBQ0E7Z0JBQ0VULElBQUk7Z0JBQ0pDLE1BQU07Z0JBQ05DLGFBQWE7Z0JBQ2JNLE1BQU07Z0JBQ05DLFVBQVU7WUFDWjtZQUNBO2dCQUNFVCxJQUFJO2dCQUNKQyxNQUFNO2dCQUNOQyxhQUFhO2dCQUNiTSxNQUFNO2dCQUNOQyxVQUFVO1lBQ1o7WUFDQTtnQkFDRVQsSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkMsYUFBYTtnQkFDYk0sTUFBTTtnQkFDTkMsVUFBVTtZQUNaO1NBQ0Q7UUFDREMsVUFBVSxFQUFFO1FBQ1pDLE9BQU8sRUFBRTtRQUNUQyxXQUFXLEVBQUU7UUFDYkMsV0FBVyxPQUFPbkI7WUFDaEIsTUFBTW9CLGdCQUFnQnJCLE1BQU1DLE1BQU07WUFDbENxQixRQUFRQyxHQUFHLENBQUM7WUFDWkQsUUFBUUMsR0FBRyxDQUFDLG9CQUFvQkY7WUFDaENDLFFBQVFDLEdBQUcsQ0FBQyxnQkFBZ0J0QjtZQUU1QixJQUFJb0Isa0JBQWtCcEIsUUFBUTtnQkFDNUJxQixRQUFRQyxHQUFHLENBQUMsb0NBQTBCRixlQUFlLE1BQU1wQjtnQkFFM0QsMENBQTBDO2dCQUMxQyxJQUFJb0IsZUFBZTtvQkFDakJDLFFBQVFDLEdBQUcsQ0FBQywrQ0FBcUNGO29CQUNqRCxNQUFNckIsTUFBTXdCLFlBQVk7b0JBQ3hCRixRQUFRQyxHQUFHLENBQUMsbUNBQW1DRjtnQkFDakQ7Z0JBRUEsMkJBQTJCO2dCQUMzQkMsUUFBUUMsR0FBRyxDQUFDO2dCQUNaeEIsSUFBSTtvQkFDRkU7b0JBQ0FDLElBQUk7b0JBQ0pDLE9BQU87b0JBQ1BDLFFBQVE7b0JBQ1JhLFVBQVUsRUFBRTtvQkFDWlosV0FBVztnQkFDYjtnQkFFQSxpQ0FBaUM7Z0JBQ2pDLElBQUlKLFFBQVE7b0JBQ1ZxQixRQUFRQyxHQUFHLENBQUMsMkNBQWlDdEI7b0JBQzdDLE1BQU1ELE1BQU15QixZQUFZLENBQUN4QjtnQkFDM0I7Z0JBRUFGLElBQUk7b0JBQUVNLFdBQVc7Z0JBQU07Z0JBQ3ZCaUIsUUFBUUMsR0FBRyxDQUFDO1lBQ2QsT0FBTztnQkFDTEQsUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7UUFDRjtRQUNBRyxPQUFPLENBQUN4QjtZQUNOSCxJQUFJO2dCQUFFRztZQUFHO1lBQ1RGLE1BQU13QixZQUFZO1FBQ3BCO1FBQ0FHLE9BQU8sQ0FBQ0M7WUFDTixNQUFNLEVBQUUxQixFQUFFLEVBQUVDLEtBQUssRUFBRSxHQUFHSDtZQUN0QixNQUFNNkIsUUFBUTNCLEtBQUswQjtZQUNuQixNQUFNRSxXQUFXQyxLQUFLQyxLQUFLLENBQUNILFFBQVEsT0FBTztZQUMzQ1AsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQkssUUFBUSxXQUFXQyxPQUFPLGNBQWNDO1lBQ3BFL0IsSUFBSTtnQkFBRUcsSUFBSTJCO2dCQUFPMUIsT0FBTzJCO1lBQVM7WUFDakNSLFFBQVFDLEdBQUcsQ0FBQztZQUNadkIsTUFBTXdCLFlBQVk7UUFDcEI7UUFDQVMsVUFBVSxDQUFDOUI7WUFDVEosSUFBSTtnQkFBRUk7WUFBTTtZQUNaSCxNQUFNd0IsWUFBWTtRQUNwQjtRQUNBVSxXQUFXLENBQUM5QjtZQUNWTCxJQUFJO2dCQUFFSztZQUFPO1lBQ2JKLE1BQU13QixZQUFZO1FBQ3BCO1FBQ0FXLGlCQUFpQixDQUFDQztZQUNoQixNQUFNLEVBQUU5QixRQUFRLEVBQUUsR0FBR047WUFDckIsTUFBTXFDLGtCQUFrQi9CLFNBQVNnQyxHQUFHLENBQUNDLENBQUFBLFVBQ25DQSxRQUFRaEMsRUFBRSxLQUFLNkIsWUFDWDtvQkFBRSxHQUFHRyxPQUFPO29CQUFFMUIsUUFBUTtvQkFBTUQsVUFBVSxJQUFJNEIsT0FBT0MsV0FBVztnQkFBRyxJQUMvREY7WUFFTnhDLElBQUk7Z0JBQUVPLFVBQVUrQjtZQUFnQjtZQUNoQ3JDLE1BQU13QixZQUFZO1FBQ3BCO1FBQ0FrQixtQkFBbUIsQ0FBQ0M7WUFDbEIsTUFBTSxFQUFFN0IsWUFBWSxFQUFFLEdBQUdkO1lBQ3pCLE1BQU00QyxzQkFBc0I5QixhQUFhd0IsR0FBRyxDQUFDTyxDQUFBQSxjQUMzQ0EsWUFBWXRDLEVBQUUsS0FBS29DLGdCQUNmO29CQUFFLEdBQUdFLFdBQVc7b0JBQUU3QixVQUFVO29CQUFNOEIsWUFBWSxJQUFJTixPQUFPQyxXQUFXO2dCQUFHLElBQ3ZFSTtZQUVOOUMsSUFBSTtnQkFBRWUsY0FBYzhCO1lBQW9CO1lBQ3hDNUMsTUFBTXdCLFlBQVk7UUFDcEI7UUFDQXVCLFlBQVksQ0FBQ0M7WUFDWCxNQUFNLEVBQUUvQixRQUFRLEVBQUUsR0FBR2pCO1lBQ3JCLE1BQU1pRCxjQUFjLENBQUNDLFVBQWtCQztnQkFDckMsTUFBTUMsU0FBU0YsV0FBVyxHQUFHLGtCQUFrQjtnQkFDL0MsTUFBTUcscUJBQXFCO29CQUN6QixPQUFPO29CQUNQLFVBQVU7b0JBQ1YsUUFBUTtnQkFDVjtnQkFDQSxPQUFPdEIsS0FBS3VCLEtBQUssQ0FBQ0YsU0FBU0Msa0JBQWtCLENBQUNGLFNBQVM7WUFDekQ7WUFFQSxNQUFNSSxhQUFzQjtnQkFDMUIsR0FBR1AsT0FBTztnQkFDVnpDLElBQUlpQyxLQUFLZ0IsR0FBRyxHQUFHQyxRQUFRO2dCQUN2QkMsU0FBU1QsWUFBWUQsUUFBUUUsUUFBUSxFQUFFRixRQUFRRyxRQUFRO2dCQUN2RFEsV0FBVyxJQUFJbkIsT0FBT0MsV0FBVztZQUNuQztZQUNBbkIsUUFBUUMsR0FBRyxDQUFDLGdDQUFzQmdDO1lBQ2xDeEQsSUFBSTtnQkFBRWtCLFVBQVU7dUJBQUlBO29CQUFVc0M7aUJBQVc7WUFBQztZQUMxQ2pDLFFBQVFDLEdBQUcsQ0FBQztZQUNadkIsTUFBTXdCLFlBQVk7UUFDcEI7UUFDQW9DLGlCQUFpQixDQUFDQztZQUNoQixNQUFNLEVBQUU1QyxRQUFRLEVBQUVVLEtBQUssRUFBRWUsaUJBQWlCLEVBQUUsR0FBRzFDO1lBQy9DLE1BQU04RCxrQkFBa0I3QyxTQUFTcUIsR0FBRyxDQUFDVSxDQUFBQTtnQkFDbkMsSUFBSUEsUUFBUXpDLEVBQUUsS0FBS3NELGFBQWEsQ0FBQ2IsUUFBUWUsU0FBUyxFQUFFO29CQUNsRHpDLFFBQVFDLEdBQUcsQ0FBQyxvQ0FBMEJ5QixRQUFRZ0IsS0FBSyxFQUFFLE9BQU9oQixRQUFRVSxPQUFPO29CQUMzRS9CLE1BQU1xQixRQUFRVSxPQUFPO29CQUNyQixzQ0FBc0M7b0JBQ3RDLE1BQU1PLG9CQUFvQmhELFNBQVNpRCxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVKLFNBQVMsRUFBRUssTUFBTTtvQkFDbEUsSUFBSUgsc0JBQXNCLEdBQUc7d0JBQzNCdkIsa0JBQWtCO29CQUNwQjtvQkFDQSxPQUFPO3dCQUFFLEdBQUdNLE9BQU87d0JBQUVlLFdBQVc7d0JBQU1NLGFBQWEsSUFBSTdCLE9BQU9DLFdBQVc7b0JBQUc7Z0JBQzlFO2dCQUNBLE9BQU9PO1lBQ1Q7WUFDQWpELElBQUk7Z0JBQUVrQixVQUFVNkM7WUFBZ0I7WUFDaEN4QyxRQUFRQyxHQUFHLENBQUM7WUFDWnZCLE1BQU13QixZQUFZO1FBQ3BCO1FBQ0E4QyxlQUFlLENBQUNUO1lBQ2QsTUFBTSxFQUFFNUMsUUFBUSxFQUFFLEdBQUdqQjtZQUNyQkQsSUFBSTtnQkFBRWtCLFVBQVVBLFNBQVNpRCxNQUFNLENBQUNsQixDQUFBQSxVQUFXQSxRQUFRekMsRUFBRSxLQUFLc0Q7WUFBVztZQUNyRTdELE1BQU13QixZQUFZO1FBQ3BCO1FBQ0ErQyxZQUFZLENBQUNWO1lBQ1gsTUFBTSxFQUFFNUMsUUFBUSxFQUFFLEdBQUdqQjtZQUNyQixNQUFNOEQsa0JBQWtCN0MsU0FBU3FCLEdBQUcsQ0FBQ1UsQ0FBQUE7Z0JBQ25DLElBQUlBLFFBQVF6QyxFQUFFLEtBQUtzRCxhQUFhLENBQUNiLFFBQVFlLFNBQVMsRUFBRTtvQkFDbEQsT0FBTzt3QkFDTCxHQUFHZixPQUFPO3dCQUNWd0IsYUFBYTt3QkFDYkMsZ0JBQWdCLElBQUlqQyxPQUFPQyxXQUFXO3dCQUN0Q2lDLGVBQWUxQixRQUFRMEIsYUFBYSxJQUFJMUIsUUFBUUUsUUFBUSxDQUFDLHFDQUFxQztvQkFDaEc7Z0JBQ0Y7Z0JBQ0EsT0FBT0Y7WUFDVDtZQUNBakQsSUFBSTtnQkFBRWtCLFVBQVU2QztZQUFnQjtZQUNoQzlELE1BQU13QixZQUFZO1FBQ3BCO1FBQ0FtRCxXQUFXLENBQUNkO1lBQ1YsTUFBTSxFQUFFNUMsUUFBUSxFQUFFLEdBQUdqQjtZQUNyQixNQUFNOEQsa0JBQWtCN0MsU0FBU3FCLEdBQUcsQ0FBQ1UsQ0FBQUE7Z0JBQ25DLElBQUlBLFFBQVF6QyxFQUFFLEtBQUtzRCxhQUFhYixRQUFRd0IsV0FBVyxFQUFFO29CQUNuRCx5Q0FBeUM7b0JBQ3pDLE1BQU1JLFlBQVksSUFBSXBDLEtBQUtRLFFBQVF5QixjQUFjO29CQUNqRCxNQUFNSSxjQUFjLElBQUlyQztvQkFDeEIsTUFBTXNDLGlCQUFpQi9DLEtBQUtDLEtBQUssQ0FBQyxDQUFDNkMsWUFBWUUsT0FBTyxLQUFLSCxVQUFVRyxPQUFPLEVBQUMsSUFBSztvQkFDbEYsTUFBTUMsbUJBQW1CakQsS0FBS2tELEdBQUcsQ0FBQyxHQUFHLENBQUNqQyxRQUFRMEIsYUFBYSxJQUFJMUIsUUFBUUUsUUFBUSxJQUFJLEtBQUs0QjtvQkFDeEYsTUFBTUksbUJBQW1CbkQsS0FBS0MsS0FBSyxDQUFDZ0QsbUJBQW1CO29CQUV2RCxPQUFPO3dCQUNMLEdBQUdoQyxPQUFPO3dCQUNWd0IsYUFBYTt3QkFDYkUsZUFBZVE7b0JBQ2pCO2dCQUNGO2dCQUNBLE9BQU9sQztZQUNUO1lBQ0FqRCxJQUFJO2dCQUFFa0IsVUFBVTZDO1lBQWdCO1lBQ2hDOUQsTUFBTXdCLFlBQVk7UUFDcEI7UUFDQTJELGdCQUFnQjtZQUNkLE1BQU0sRUFBRWxFLFFBQVEsRUFBRVUsS0FBSyxFQUFFLEdBQUczQjtZQUM1QixNQUFNd0QsTUFBTSxJQUFJaEI7WUFDaEIsSUFBSTRDLHFCQUFxQjtZQUV6QixNQUFNdEIsa0JBQWtCN0MsU0FBU3FCLEdBQUcsQ0FBQ1UsQ0FBQUE7Z0JBQ25DLElBQUksQ0FBQ0EsUUFBUWUsU0FBUyxJQUFJLENBQUNmLFFBQVFxQyxPQUFPLEVBQUU7b0JBQzFDLE1BQU1DLFdBQVcsSUFBSTlDLEtBQUtRLFFBQVFzQyxRQUFRO29CQUMxQyxJQUFJOUIsTUFBTThCLFVBQVU7d0JBQ2xCRixxQkFBcUI7d0JBQ3JCLG9DQUFvQzt3QkFDcEMsTUFBTUcsVUFBVXhELEtBQUt1QixLQUFLLENBQUNOLFFBQVFVLE9BQU8sR0FBRzt3QkFDN0MvQixNQUFNLENBQUM0RDt3QkFFUCxvQkFBb0I7d0JBQ3BCLElBQUksa0JBQWtCQyxVQUFVQyxhQUFhQyxVQUFVLEtBQUssV0FBVzs0QkFDckUsSUFBSUQsYUFBYSxvQkFBb0I7Z0NBQ25DRSxNQUFNLEdBQXlDSixPQUF0Q3ZDLFFBQVFnQixLQUFLLEVBQUMsMEJBQWdDLE9BQVJ1QixTQUFRO2dDQUN2RHhFLE1BQU07NEJBQ1I7d0JBQ0Y7d0JBRUEsT0FBTzs0QkFBRSxHQUFHaUMsT0FBTzs0QkFBRXFDLFNBQVM7d0JBQUs7b0JBQ3JDO2dCQUNGO2dCQUNBLE9BQU9yQztZQUNUO1lBRUEsSUFBSW9DLG9CQUFvQjtnQkFDdEJyRixJQUFJO29CQUFFa0IsVUFBVTZDO2dCQUFnQjtnQkFDaEM5RCxNQUFNd0IsWUFBWTtZQUNwQjtRQUNGO1FBQ0FvRSxTQUFTLENBQUNDO1lBQ1IsTUFBTSxFQUFFM0UsS0FBSyxFQUFFakIsTUFBTSxFQUFFLEdBQUdEO1lBQzFCLE1BQU04RixVQUFnQjtnQkFDcEIsR0FBR0QsSUFBSTtnQkFDUHRGLElBQUlpQyxLQUFLZ0IsR0FBRyxHQUFHQyxRQUFRO2dCQUN2QkUsV0FBVyxJQUFJbkIsT0FBT0MsV0FBVztZQUNuQztZQUNBbkIsUUFBUUMsR0FBRyxDQUFDLDZCQUFtQnVFO1lBQy9CLE1BQU1DLGVBQWU7bUJBQUk3RTtnQkFBTzRFO2FBQVE7WUFDeEMvRixJQUFJO2dCQUFFbUIsT0FBTzZFO1lBQWE7WUFFMUIsK0JBQStCO1lBQy9CLElBQUk5RixRQUFRO2dCQUNWSiw4REFBbUJBLENBQUNJLFFBQVE4RjtZQUM5QjtZQUNBL0YsTUFBTXdCLFlBQVk7UUFDcEI7UUFDQXdFLFlBQVksQ0FBQ0M7WUFDWCxNQUFNLEVBQUUvRSxLQUFLLEVBQUVqQixNQUFNLEVBQUUsR0FBR0Q7WUFDMUIsTUFBTStGLGVBQWU3RSxNQUFNZ0QsTUFBTSxDQUFDMkIsQ0FBQUEsT0FBUUEsS0FBS3RGLEVBQUUsS0FBSzBGO1lBQ3REbEcsSUFBSTtnQkFBRW1CLE9BQU82RTtZQUFhO1lBRTFCLCtCQUErQjtZQUMvQixJQUFJOUYsUUFBUTtnQkFDVkosOERBQW1CQSxDQUFDSSxRQUFROEY7WUFDOUI7WUFDQS9GLE1BQU13QixZQUFZO1FBQ3BCO1FBQ0E5Qix1QkFBdUIsT0FBT3dHO1lBQzVCNUUsUUFBUUMsR0FBRyxDQUFDLG9EQUEwQzJFO1lBQ3REbkcsSUFBSTtnQkFBRW9CLFdBQVcrRTtZQUFTO1lBQzFCNUUsUUFBUUMsR0FBRyxDQUFDO1lBQ1osTUFBTTVCLDBFQUF1QkEsQ0FBQ0ssTUFBTUMsTUFBTSxFQUFHaUc7WUFDN0M1RSxRQUFRQyxHQUFHLENBQUM7UUFDZDtRQUNBRSxjQUFjLE9BQU94QjtZQUNuQixJQUFJO2dCQUNGcUIsUUFBUUMsR0FBRyxDQUFDO2dCQUNaRCxRQUFRQyxHQUFHLENBQUMsWUFBWXRCO2dCQUN4QkYsSUFBSTtvQkFBRU0sV0FBVztnQkFBSztnQkFFdEIsTUFBTThGLGNBQWMsTUFBTTNHLG1FQUFjQSxDQUFDUztnQkFDekMsSUFBSWtHLGFBQWE7d0JBS0hBLHVCQUNJQTtvQkFMaEI3RSxRQUFRQyxHQUFHLENBQUMseUJBQXlCNEU7b0JBQ3JDN0UsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQjt3QkFDM0JyQixJQUFJaUcsWUFBWWpHLEVBQUU7d0JBQ2xCQyxPQUFPZ0csWUFBWWhHLEtBQUs7d0JBQ3hCYyxVQUFVa0YsRUFBQUEsd0JBQUFBLFlBQVlsRixRQUFRLGNBQXBCa0YsNENBQUFBLHNCQUFzQi9CLE1BQU0sS0FBSTt3QkFDMUN0RCxjQUFjcUYsRUFBQUEsNEJBQUFBLFlBQVlyRixZQUFZLGNBQXhCcUYsZ0RBQUFBLDBCQUEwQi9CLE1BQU0sS0FBSTtvQkFDcEQ7b0JBQ0E5QyxRQUFRQyxHQUFHLENBQUMsMkJBQTJCO3dCQUNyQ3JCLElBQUlpRyxZQUFZakcsRUFBRTt3QkFDbEJDLE9BQU9nRyxZQUFZaEcsS0FBSzt3QkFDeEJDLFFBQVErRixZQUFZL0YsTUFBTTt3QkFDMUJhLFVBQVVrRixZQUFZbEYsUUFBUTt3QkFDOUJILGNBQWNxRixZQUFZckYsWUFBWTt3QkFDdENSLFVBQVU2RixZQUFZN0YsUUFBUTtvQkFDaEM7b0JBRUEsTUFBTThGLGFBQWE7d0JBQ2pCbkc7d0JBQ0FDLElBQUlpRyxZQUFZakcsRUFBRSxLQUFLbUcsWUFBWUYsWUFBWWpHLEVBQUUsR0FBRzt3QkFDcERDLE9BQU9nRyxZQUFZaEcsS0FBSyxLQUFLa0csWUFBWUYsWUFBWWhHLEtBQUssR0FBRzt3QkFDN0RDLFFBQVErRixZQUFZL0YsTUFBTSxLQUFLaUcsWUFBWUYsWUFBWS9GLE1BQU0sR0FBRzt3QkFDaEVFLFVBQVU2RixZQUFZN0YsUUFBUSxJQUFJTixNQUFNTSxRQUFRO3dCQUNoRFEsY0FBY3FGLFlBQVlyRixZQUFZLElBQUlkLE1BQU1jLFlBQVk7d0JBQzVERyxVQUFVa0YsWUFBWWxGLFFBQVEsSUFBSSxFQUFFO3dCQUNwQ0MsT0FBT2lGLFlBQVlqRixLQUFLLElBQUksRUFBRTt3QkFDOUJDLFdBQVdnRixZQUFZaEYsU0FBUyxJQUFJLEVBQUU7d0JBQ3RDZCxXQUFXO29CQUNiO29CQUVBaUIsUUFBUUMsR0FBRyxDQUFDLHNDQUFzQzZFO29CQUNsRHJHLElBQUlxRztvQkFDSjlFLFFBQVFDLEdBQUcsQ0FBQyx3Q0FBd0N0QjtnQkFDdEQsT0FBTztvQkFDTHFCLFFBQVFDLEdBQUcsQ0FBQztvQkFDWix3Q0FBd0M7b0JBQ3hDeEIsSUFBSTt3QkFDRkU7d0JBQ0FDLElBQUk7d0JBQ0pDLE9BQU87d0JBQ1BDLFFBQVE7d0JBQ1JhLFVBQVUsRUFBRTt3QkFDWlosV0FBVztvQkFDYjtvQkFDQWlCLFFBQVFDLEdBQUcsQ0FBQztnQkFDZDtZQUNGLEVBQUUsT0FBTytFLE9BQVk7Z0JBQ25CaEYsUUFBUWdGLEtBQUssQ0FBQyw4QkFBOEJBO2dCQUM1Q2hGLFFBQVFnRixLQUFLLENBQUMsa0JBQWtCO29CQUM5QkMsU0FBU0QsTUFBTUMsT0FBTztvQkFDdEJDLE1BQU1GLE1BQU1FLElBQUk7b0JBQ2hCQyxPQUFPSCxNQUFNRyxLQUFLO2dCQUNwQjtnQkFDQTFHLElBQUk7b0JBQUVNLFdBQVc7Z0JBQU07WUFDekI7UUFDRjtRQUNBbUIsY0FBYztZQUNaLE1BQU0sRUFBRXZCLE1BQU0sRUFBRUMsRUFBRSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUUsUUFBUSxFQUFFUSxZQUFZLEVBQUVHLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUUsR0FBR25CO1lBQzFGLElBQUlDLFFBQVE7Z0JBQ1YsSUFBSTtvQkFDRnFCLFFBQVFDLEdBQUcsQ0FBQztvQkFDWkQsUUFBUUMsR0FBRyxDQUFDLFlBQVl0QjtvQkFDeEJxQixRQUFRQyxHQUFHLENBQUMsaUJBQWlCO3dCQUMzQnJCO3dCQUNBQzt3QkFDQUM7d0JBQ0FzRyxlQUFlekYsU0FBU21ELE1BQU07d0JBQzlCdUMsbUJBQW1CN0YsYUFBYXNELE1BQU07d0JBQ3RDd0MsZUFBZXRHLFNBQVM4RCxNQUFNO29CQUNoQztvQkFDQTlDLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JOO29CQUNwQ0ssUUFBUUMsR0FBRyxDQUFDLDRCQUE0QlQ7b0JBQ3hDUSxRQUFRQyxHQUFHLENBQUMsd0JBQXdCakI7b0JBRXBDLE1BQU11RyxhQUFhO3dCQUNqQjNHO3dCQUNBQzt3QkFDQUM7d0JBQ0FFO3dCQUNBUTt3QkFDQUc7d0JBQ0FDO3dCQUNBQztvQkFDRjtvQkFFQUcsUUFBUUMsR0FBRyxDQUFDLDRCQUE0QnNGO29CQUN4QyxNQUFNcEgsc0VBQWlCQSxDQUFDUSxRQUFRNEc7b0JBQ2hDdkYsUUFBUUMsR0FBRyxDQUFDLHVDQUF1Q3RCO2dCQUNyRCxFQUFFLE9BQU9xRyxPQUFZO29CQUNuQmhGLFFBQVFnRixLQUFLLENBQUMsNkJBQTZCQTtvQkFDM0NoRixRQUFRZ0YsS0FBSyxDQUFDLGtCQUFrQjt3QkFDOUJDLFNBQVNELE1BQU1DLE9BQU87d0JBQ3RCQyxNQUFNRixNQUFNRSxJQUFJO3dCQUNoQkMsT0FBT0gsTUFBTUcsS0FBSztvQkFDcEI7Z0JBQ0Y7WUFDRixPQUFPO2dCQUNMbkYsUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7UUFDRjtRQUNBdUYsZUFBZTtZQUNiL0csSUFBSTtnQkFDRkUsUUFBUTtnQkFDUkMsSUFBSTtnQkFDSkMsT0FBTztnQkFDUEMsUUFBUTtnQkFDUmEsVUFBVSxFQUFFO2dCQUNaWixXQUFXO1lBQ2I7UUFDRjtJQUNGLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0b3JlL2dhbWVTdG9yZS50cz8yODk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ3p1c3RhbmQnO1xuaW1wb3J0IHsgUG93ZXJVcCwgQWNoaWV2ZW1lbnQgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGdldFVzZXJQcm9maWxlLCB1cGRhdGVVc2VyUHJvZmlsZSwgc2F2ZVRpbWV0YWJsZVNlc3Npb25zIGFzIHNhdmVUaW1ldGFibGVUb0ZpcmViYXNlLCBzYXZlRXhhbXMgYXMgc2F2ZUV4YW1zVG9GaXJlYmFzZSB9IGZyb20gJ0AvbGliL2ZpcmViYXNlLXV0aWxzJztcblxuaW50ZXJmYWNlIE1pc3Npb24ge1xuICBpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBzdWJqZWN0OiBzdHJpbmc7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIGRlYWRsaW5lOiBzdHJpbmc7XG4gIHhwVmFsdWU6IG51bWJlcjtcbiAgY29tcGxldGVkOiBib29sZWFuO1xuICBjb21wbGV0ZWRBdD86IHN0cmluZztcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHByaW9yaXR5OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xuICB0aW1lckFjdGl2ZT86IGJvb2xlYW47XG4gIHRpbWVyU3RhcnRUaW1lPzogc3RyaW5nO1xuICB0aW1lUmVtYWluaW5nPzogbnVtYmVyOyAvLyBpbiBtaW51dGVzXG4gIG92ZXJkdWU/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgRXhhbSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHN1YmplY3Q6IHN0cmluZztcbiAgZXhhbURhdGU6IHN0cmluZztcbiAgZXhhbVRpbWU6IHN0cmluZztcbiAgbG9jYXRpb24/OiBzdHJpbmc7XG4gIG5vdGVzPzogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEdhbWVTdGF0ZSB7XG4gIHVzZXJJZDogc3RyaW5nIHwgbnVsbDtcbiAgeHA6IG51bWJlcjtcbiAgbGV2ZWw6IG51bWJlcjtcbiAgc3RyZWFrOiBudW1iZXI7XG4gIHBvd2VyVXBzOiBQb3dlclVwW107XG4gIGFjaGlldmVtZW50czogQWNoaWV2ZW1lbnRbXTtcbiAgbWlzc2lvbnM6IE1pc3Npb25bXTtcbiAgZXhhbXM6IEV4YW1bXTtcbiAgdGltZXRhYmxlOiBhbnlbXTtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBzZXRVc2VySWQ6ICh1c2VySWQ6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gIHNldFhQOiAoeHA6IG51bWJlcikgPT4gdm9pZDtcbiAgYWRkWFA6IChhbW91bnQ6IG51bWJlcikgPT4gdm9pZDtcbiAgc2V0TGV2ZWw6IChsZXZlbDogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXRTdHJlYWs6IChzdHJlYWs6IG51bWJlcikgPT4gdm9pZDtcbiAgYWN0aXZhdGVQb3dlclVwOiAocG93ZXJVcElkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHVubG9ja0FjaGlldmVtZW50OiAoYWNoaWV2ZW1lbnRJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBhZGRNaXNzaW9uOiAobWlzc2lvbjogT21pdDxNaXNzaW9uLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAneHBWYWx1ZSc+KSA9PiB2b2lkO1xuICBjb21wbGV0ZU1pc3Npb246IChtaXNzaW9uSWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgZGVsZXRlTWlzc2lvbjogKG1pc3Npb25JZDogc3RyaW5nKSA9PiB2b2lkO1xuICBzdGFydFRpbWVyOiAobWlzc2lvbklkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHN0b3BUaW1lcjogKG1pc3Npb25JZDogc3RyaW5nKSA9PiB2b2lkO1xuICBjaGVja0RlYWRsaW5lczogKCkgPT4gdm9pZDtcbiAgYWRkRXhhbTogKGV4YW06IE9taXQ8RXhhbSwgJ2lkJyB8ICdjcmVhdGVkQXQnPikgPT4gdm9pZDtcbiAgZGVsZXRlRXhhbTogKGV4YW1JZDogc3RyaW5nKSA9PiB2b2lkO1xuICBzYXZlVGltZXRhYmxlU2Vzc2lvbnM6IChzZXNzaW9uczogYW55W10pID0+IFByb21pc2U8dm9pZD47XG4gIGxvYWRVc2VyRGF0YTogKHVzZXJJZDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBzYXZlVXNlckRhdGE6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHJlc2V0VXNlckRhdGE6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VHYW1lU3RvcmUgPSBjcmVhdGU8R2FtZVN0YXRlPigpKChzZXQsIGdldCkgPT4gKHtcbiAgdXNlcklkOiBudWxsLFxuICB4cDogMCxcbiAgbGV2ZWw6IDEsXG4gIHN0cmVhazogMCxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgcG93ZXJVcHM6IFtcbiAgICB7XG4gICAgICBpZDogJ3N0dWR5LWJ1ZGR5JyxcbiAgICAgIG5hbWU6ICdTdHVkeSBCdWRkeScsXG4gICAgICBkZXNjcmlwdGlvbjogJ0dldCBhIHN0dWR5IHBhcnRuZXIgZm9yIDMwIG1pbnV0ZXMgLSByZWR1Y2VzIG1pc3Npb24gZHVyYXRpb24gYnkgMjUlJyxcbiAgICAgIGVmZmVjdDogJ2R1cmF0aW9uLXJlZHVjdGlvbicsXG4gICAgICBjb29sZG93bjogMTIsXG4gICAgICBsYXN0VXNlZDogbnVsbCxcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3hwLWJvb3N0JyxcbiAgICAgIG5hbWU6ICdYUCBCb29zdCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ0RvdWJsZSBYUCBmb3IgbmV4dCAzIG1pc3Npb25zJyxcbiAgICAgIGVmZmVjdDogJ3hwLWJvb3N0JyxcbiAgICAgIGNvb2xkb3duOiAxMixcbiAgICAgIGxhc3RVc2VkOiBudWxsLFxuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAndGltZS1mcmVlemUnLFxuICAgICAgbmFtZTogJ1RpbWUgRnJlZXplJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRXh0ZW5kIGRlYWRsaW5lIGJ5IDI0IGhvdXJzJyxcbiAgICAgIGVmZmVjdDogJ2RlYWRsaW5lLWV4dGVuc2lvbicsXG4gICAgICBjb29sZG93bjogNDgsXG4gICAgICBsYXN0VXNlZDogbnVsbCxcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgfSxcbiAgXSxcbiAgYWNoaWV2ZW1lbnRzOiBbXG4gICAge1xuICAgICAgaWQ6ICdmaXJzdC1taXNzaW9uJyxcbiAgICAgIG5hbWU6ICdGaXJzdCBTdGVwcycsXG4gICAgICBkZXNjcmlwdGlvbjogJ0NvbXBsZXRlIHlvdXIgZmlyc3QgbWlzc2lvbicsXG4gICAgICBpY29uOiAn8J+OrycsXG4gICAgICB1bmxvY2tlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3N0cmVhay03JyxcbiAgICAgIG5hbWU6ICdXZWVrIFdhcnJpb3InLFxuICAgICAgZGVzY3JpcHRpb246ICdNYWludGFpbiBhIDctZGF5IHN0cmVhaycsXG4gICAgICBpY29uOiAn8J+UpScsXG4gICAgICB1bmxvY2tlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2xldmVsLTEwJyxcbiAgICAgIG5hbWU6ICdTY2hvbGFyJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUmVhY2ggbGV2ZWwgMTAnLFxuICAgICAgaWNvbjogJ/CfjpMnLFxuICAgICAgdW5sb2NrZWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICd4cC0xMDAwJyxcbiAgICAgIG5hbWU6ICdLbm93bGVkZ2UgU2Vla2VyJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRWFybiAxMDAwIFhQJyxcbiAgICAgIGljb246ICfirZAnLFxuICAgICAgdW5sb2NrZWQ6IGZhbHNlLFxuICAgIH0sXG4gIF0sXG4gIG1pc3Npb25zOiBbXSxcbiAgZXhhbXM6IFtdLFxuICB0aW1ldGFibGU6IFtdLFxuICBzZXRVc2VySWQ6IGFzeW5jICh1c2VySWQ6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICBjb25zdCBjdXJyZW50VXNlcklkID0gZ2V0KCkudXNlcklkO1xuICAgIGNvbnNvbGUubG9nKCc9PT0gU0VUIFVTRVIgSUQgPT09Jyk7XG4gICAgY29uc29sZS5sb2coJ0N1cnJlbnQgdXNlciBJRDonLCBjdXJyZW50VXNlcklkKTtcbiAgICBjb25zb2xlLmxvZygnTmV3IHVzZXIgSUQ6JywgdXNlcklkKTtcbiAgICBcbiAgICBpZiAoY3VycmVudFVzZXJJZCAhPT0gdXNlcklkKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UhCBTd2l0Y2hpbmcgdXNlciBmcm9tJywgY3VycmVudFVzZXJJZCwgJ3RvJywgdXNlcklkKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBjdXJyZW50IHVzZXIgZGF0YSBiZWZvcmUgc3dpdGNoaW5nXG4gICAgICBpZiAoY3VycmVudFVzZXJJZCkge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+SviBTYXZpbmcgZGF0YSBmb3IgcHJldmlvdXMgdXNlcjonLCBjdXJyZW50VXNlcklkKTtcbiAgICAgICAgYXdhaXQgZ2V0KCkuc2F2ZVVzZXJEYXRhKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgU2F2ZWQgZGF0YSBmb3IgcHJldmlvdXMgdXNlcjonLCBjdXJyZW50VXNlcklkKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVzZXQgc3RhdGUgZm9yIG5ldyB1c2VyXG4gICAgICBjb25zb2xlLmxvZygn8J+UhCBSZXNldHRpbmcgc3RhdGUgZm9yIG5ldyB1c2VyJyk7XG4gICAgICBzZXQoeyBcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB4cDogMCxcbiAgICAgICAgbGV2ZWw6IDEsXG4gICAgICAgIHN0cmVhazogMCxcbiAgICAgICAgbWlzc2lvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBMb2FkIG5ldyB1c2VyIGRhdGEgaWYgcHJvdmlkZWRcbiAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6UgTG9hZGluZyBkYXRhIGZvciBuZXcgdXNlcjonLCB1c2VySWQpO1xuICAgICAgICBhd2FpdCBnZXQoKS5sb2FkVXNlckRhdGEodXNlcklkKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgc2V0KHsgaXNMb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVXNlciBJRCBzZXQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gU2FtZSB1c2VyIElELCBubyBjaGFuZ2UgbmVlZGVkJyk7XG4gICAgfVxuICB9LFxuICBzZXRYUDogKHhwKSA9PiB7XG4gICAgc2V0KHsgeHAgfSk7XG4gICAgZ2V0KCkuc2F2ZVVzZXJEYXRhKCk7XG4gIH0sXG4gIGFkZFhQOiAoYW1vdW50KSA9PiB7XG4gICAgY29uc3QgeyB4cCwgbGV2ZWwgfSA9IGdldCgpO1xuICAgIGNvbnN0IG5ld1hQID0geHAgKyBhbW91bnQ7XG4gICAgY29uc3QgbmV3TGV2ZWwgPSBNYXRoLmZsb29yKG5ld1hQIC8gMTAwKSArIDE7XG4gICAgY29uc29sZS5sb2coJ+KtkCBBZGRpbmcgWFA6JywgYW1vdW50LCAnTmV3IFhQOicsIG5ld1hQLCAnTmV3IExldmVsOicsIG5ld0xldmVsKTtcbiAgICBzZXQoeyB4cDogbmV3WFAsIGxldmVsOiBuZXdMZXZlbCB9KTtcbiAgICBjb25zb2xlLmxvZygn8J+SviBTYXZpbmcgZGF0YSBhZnRlciBhZGRpbmcgWFAuLi4nKTtcbiAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgfSxcbiAgc2V0TGV2ZWw6IChsZXZlbCkgPT4ge1xuICAgIHNldCh7IGxldmVsIH0pO1xuICAgIGdldCgpLnNhdmVVc2VyRGF0YSgpO1xuICB9LFxuICBzZXRTdHJlYWs6IChzdHJlYWspID0+IHtcbiAgICBzZXQoeyBzdHJlYWsgfSk7XG4gICAgZ2V0KCkuc2F2ZVVzZXJEYXRhKCk7XG4gIH0sXG4gIGFjdGl2YXRlUG93ZXJVcDogKHBvd2VyVXBJZCkgPT4ge1xuICAgIGNvbnN0IHsgcG93ZXJVcHMgfSA9IGdldCgpO1xuICAgIGNvbnN0IHVwZGF0ZWRQb3dlclVwcyA9IHBvd2VyVXBzLm1hcChwb3dlclVwID0+XG4gICAgICBwb3dlclVwLmlkID09PSBwb3dlclVwSWRcbiAgICAgICAgPyB7IC4uLnBvd2VyVXAsIGFjdGl2ZTogdHJ1ZSwgbGFzdFVzZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9XG4gICAgICAgIDogcG93ZXJVcFxuICAgICk7XG4gICAgc2V0KHsgcG93ZXJVcHM6IHVwZGF0ZWRQb3dlclVwcyB9KTtcbiAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgfSxcbiAgdW5sb2NrQWNoaWV2ZW1lbnQ6IChhY2hpZXZlbWVudElkKSA9PiB7XG4gICAgY29uc3QgeyBhY2hpZXZlbWVudHMgfSA9IGdldCgpO1xuICAgIGNvbnN0IHVwZGF0ZWRBY2hpZXZlbWVudHMgPSBhY2hpZXZlbWVudHMubWFwKGFjaGlldmVtZW50ID0+XG4gICAgICBhY2hpZXZlbWVudC5pZCA9PT0gYWNoaWV2ZW1lbnRJZFxuICAgICAgICA/IHsgLi4uYWNoaWV2ZW1lbnQsIHVubG9ja2VkOiB0cnVlLCB1bmxvY2tlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfVxuICAgICAgICA6IGFjaGlldmVtZW50XG4gICAgKTtcbiAgICBzZXQoeyBhY2hpZXZlbWVudHM6IHVwZGF0ZWRBY2hpZXZlbWVudHMgfSk7XG4gICAgZ2V0KCkuc2F2ZVVzZXJEYXRhKCk7XG4gIH0sXG4gIGFkZE1pc3Npb246IChtaXNzaW9uKSA9PiB7XG4gICAgY29uc3QgeyBtaXNzaW9ucyB9ID0gZ2V0KCk7XG4gICAgY29uc3QgY2FsY3VsYXRlWFAgPSAoZHVyYXRpb246IG51bWJlciwgcHJpb3JpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcpID0+IHtcbiAgICAgIGNvbnN0IGJhc2VYUCA9IGR1cmF0aW9uICogMjsgLy8gMiBYUCBwZXIgbWludXRlXG4gICAgICBjb25zdCBwcmlvcml0eU11bHRpcGxpZXIgPSB7XG4gICAgICAgICdsb3cnOiAwLjgsXG4gICAgICAgICdtZWRpdW0nOiAxLjAsXG4gICAgICAgICdoaWdoJzogMS41XG4gICAgICB9O1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoYmFzZVhQICogcHJpb3JpdHlNdWx0aXBsaWVyW3ByaW9yaXR5XSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBuZXdNaXNzaW9uOiBNaXNzaW9uID0ge1xuICAgICAgLi4ubWlzc2lvbixcbiAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICB4cFZhbHVlOiBjYWxjdWxhdGVYUChtaXNzaW9uLmR1cmF0aW9uLCBtaXNzaW9uLnByaW9yaXR5KSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZygn8J+OryBBZGRpbmcgbWlzc2lvbjonLCBuZXdNaXNzaW9uKTtcbiAgICBzZXQoeyBtaXNzaW9uczogWy4uLm1pc3Npb25zLCBuZXdNaXNzaW9uXSB9KTtcbiAgICBjb25zb2xlLmxvZygn8J+SviBTYXZpbmcgZGF0YSBhZnRlciBhZGRpbmcgbWlzc2lvbi4uLicpO1xuICAgIGdldCgpLnNhdmVVc2VyRGF0YSgpO1xuICB9LFxuICBjb21wbGV0ZU1pc3Npb246IChtaXNzaW9uSWQpID0+IHtcbiAgICBjb25zdCB7IG1pc3Npb25zLCBhZGRYUCwgdW5sb2NrQWNoaWV2ZW1lbnQgfSA9IGdldCgpO1xuICAgIGNvbnN0IHVwZGF0ZWRNaXNzaW9ucyA9IG1pc3Npb25zLm1hcChtaXNzaW9uID0+IHtcbiAgICAgIGlmIChtaXNzaW9uLmlkID09PSBtaXNzaW9uSWQgJiYgIW1pc3Npb24uY29tcGxldGVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn46vIENvbXBsZXRpbmcgbWlzc2lvbjonLCBtaXNzaW9uLnRpdGxlLCAnWFA6JywgbWlzc2lvbi54cFZhbHVlKTtcbiAgICAgICAgYWRkWFAobWlzc2lvbi54cFZhbHVlKTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGZpcnN0IG1pc3Npb24gYWNoaWV2ZW1lbnRcbiAgICAgICAgY29uc3QgY29tcGxldGVkTWlzc2lvbnMgPSBtaXNzaW9ucy5maWx0ZXIobSA9PiBtLmNvbXBsZXRlZCkubGVuZ3RoO1xuICAgICAgICBpZiAoY29tcGxldGVkTWlzc2lvbnMgPT09IDApIHtcbiAgICAgICAgICB1bmxvY2tBY2hpZXZlbWVudCgnZmlyc3QtbWlzc2lvbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLm1pc3Npb24sIGNvbXBsZXRlZDogdHJ1ZSwgY29tcGxldGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pc3Npb247XG4gICAgfSk7XG4gICAgc2V0KHsgbWlzc2lvbnM6IHVwZGF0ZWRNaXNzaW9ucyB9KTtcbiAgICBjb25zb2xlLmxvZygn8J+SviBTYXZpbmcgZGF0YSBhZnRlciBjb21wbGV0aW5nIG1pc3Npb24uLi4nKTtcbiAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgfSxcbiAgZGVsZXRlTWlzc2lvbjogKG1pc3Npb25JZCkgPT4ge1xuICAgIGNvbnN0IHsgbWlzc2lvbnMgfSA9IGdldCgpO1xuICAgIHNldCh7IG1pc3Npb25zOiBtaXNzaW9ucy5maWx0ZXIobWlzc2lvbiA9PiBtaXNzaW9uLmlkICE9PSBtaXNzaW9uSWQpIH0pO1xuICAgIGdldCgpLnNhdmVVc2VyRGF0YSgpO1xuICB9LFxuICBzdGFydFRpbWVyOiAobWlzc2lvbklkKSA9PiB7XG4gICAgY29uc3QgeyBtaXNzaW9ucyB9ID0gZ2V0KCk7XG4gICAgY29uc3QgdXBkYXRlZE1pc3Npb25zID0gbWlzc2lvbnMubWFwKG1pc3Npb24gPT4ge1xuICAgICAgaWYgKG1pc3Npb24uaWQgPT09IG1pc3Npb25JZCAmJiAhbWlzc2lvbi5jb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgLi4ubWlzc2lvbiwgXG4gICAgICAgICAgdGltZXJBY3RpdmU6IHRydWUsIFxuICAgICAgICAgIHRpbWVyU3RhcnRUaW1lOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgdGltZVJlbWFpbmluZzogbWlzc2lvbi50aW1lUmVtYWluaW5nIHx8IG1pc3Npb24uZHVyYXRpb24gLy8gVXNlIGV4aXN0aW5nIHRpbWUgb3IgZnVsbCBkdXJhdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pc3Npb247XG4gICAgfSk7XG4gICAgc2V0KHsgbWlzc2lvbnM6IHVwZGF0ZWRNaXNzaW9ucyB9KTtcbiAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgfSxcbiAgc3RvcFRpbWVyOiAobWlzc2lvbklkKSA9PiB7XG4gICAgY29uc3QgeyBtaXNzaW9ucyB9ID0gZ2V0KCk7XG4gICAgY29uc3QgdXBkYXRlZE1pc3Npb25zID0gbWlzc2lvbnMubWFwKG1pc3Npb24gPT4ge1xuICAgICAgaWYgKG1pc3Npb24uaWQgPT09IG1pc3Npb25JZCAmJiBtaXNzaW9uLnRpbWVyQWN0aXZlKSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSByZW1haW5pbmcgdGltZSB3aGVuIHN0b3BwaW5nXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKG1pc3Npb24udGltZXJTdGFydFRpbWUhKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBlbGFwc2VkU2Vjb25kcyA9IE1hdGguZmxvb3IoKGN1cnJlbnRUaW1lLmdldFRpbWUoKSAtIHN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ1NlY29uZHMgPSBNYXRoLm1heCgwLCAobWlzc2lvbi50aW1lUmVtYWluaW5nIHx8IG1pc3Npb24uZHVyYXRpb24pICogNjAgLSBlbGFwc2VkU2Vjb25kcyk7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ01pbnV0ZXMgPSBNYXRoLmZsb29yKHJlbWFpbmluZ1NlY29uZHMgLyA2MCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAuLi5taXNzaW9uLCBcbiAgICAgICAgICB0aW1lckFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgdGltZVJlbWFpbmluZzogcmVtYWluaW5nTWludXRlc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pc3Npb247XG4gICAgfSk7XG4gICAgc2V0KHsgbWlzc2lvbnM6IHVwZGF0ZWRNaXNzaW9ucyB9KTtcbiAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgfSxcbiAgY2hlY2tEZWFkbGluZXM6ICgpID0+IHtcbiAgICBjb25zdCB7IG1pc3Npb25zLCBhZGRYUCB9ID0gZ2V0KCk7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgaGFzT3ZlcmR1ZU1pc3Npb25zID0gZmFsc2U7XG4gICAgXG4gICAgY29uc3QgdXBkYXRlZE1pc3Npb25zID0gbWlzc2lvbnMubWFwKG1pc3Npb24gPT4ge1xuICAgICAgaWYgKCFtaXNzaW9uLmNvbXBsZXRlZCAmJiAhbWlzc2lvbi5vdmVyZHVlKSB7XG4gICAgICAgIGNvbnN0IGRlYWRsaW5lID0gbmV3IERhdGUobWlzc2lvbi5kZWFkbGluZSk7XG4gICAgICAgIGlmIChub3cgPiBkZWFkbGluZSkge1xuICAgICAgICAgIGhhc092ZXJkdWVNaXNzaW9ucyA9IHRydWU7XG4gICAgICAgICAgLy8gUGVuYWx0eTogcmVtb3ZlIDEwJSBvZiBtaXNzaW9uIFhQXG4gICAgICAgICAgY29uc3QgcGVuYWx0eSA9IE1hdGgucm91bmQobWlzc2lvbi54cFZhbHVlICogMC4xKTtcbiAgICAgICAgICBhZGRYUCgtcGVuYWx0eSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU2hvdyBub3RpZmljYXRpb25cbiAgICAgICAgICBpZiAoJ05vdGlmaWNhdGlvbicgaW4gd2luZG93ICYmIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpZmljYXRpb24oJ01pc3Npb24gT3ZlcmR1ZSEnLCB7XG4gICAgICAgICAgICAgIGJvZHk6IGAke21pc3Npb24udGl0bGV9IGlzIG92ZXJkdWUhIFlvdSBsb3N0ICR7cGVuYWx0eX0gWFAuYCxcbiAgICAgICAgICAgICAgaWNvbjogJy9mYXZpY29uLmljbydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4geyAuLi5taXNzaW9uLCBvdmVyZHVlOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtaXNzaW9uO1xuICAgIH0pO1xuICAgIFxuICAgIGlmIChoYXNPdmVyZHVlTWlzc2lvbnMpIHtcbiAgICAgIHNldCh7IG1pc3Npb25zOiB1cGRhdGVkTWlzc2lvbnMgfSk7XG4gICAgICBnZXQoKS5zYXZlVXNlckRhdGEoKTtcbiAgICB9XG4gIH0sXG4gIGFkZEV4YW06IChleGFtKSA9PiB7XG4gICAgY29uc3QgeyBleGFtcywgdXNlcklkIH0gPSBnZXQoKTtcbiAgICBjb25zdCBuZXdFeGFtOiBFeGFtID0ge1xuICAgICAgLi4uZXhhbSxcbiAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG4gICAgY29uc29sZS5sb2coJ/Cfk5ogQWRkaW5nIGV4YW06JywgbmV3RXhhbSk7XG4gICAgY29uc3QgdXBkYXRlZEV4YW1zID0gWy4uLmV4YW1zLCBuZXdFeGFtXTtcbiAgICBzZXQoeyBleGFtczogdXBkYXRlZEV4YW1zIH0pO1xuICAgIFxuICAgIC8vIFNhdmUgdG8gRmlyZWJhc2UgaW1tZWRpYXRlbHlcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICBzYXZlRXhhbXNUb0ZpcmViYXNlKHVzZXJJZCwgdXBkYXRlZEV4YW1zKTtcbiAgICB9XG4gICAgZ2V0KCkuc2F2ZVVzZXJEYXRhKCk7XG4gIH0sXG4gIGRlbGV0ZUV4YW06IChleGFtSWQpID0+IHtcbiAgICBjb25zdCB7IGV4YW1zLCB1c2VySWQgfSA9IGdldCgpO1xuICAgIGNvbnN0IHVwZGF0ZWRFeGFtcyA9IGV4YW1zLmZpbHRlcihleGFtID0+IGV4YW0uaWQgIT09IGV4YW1JZCk7XG4gICAgc2V0KHsgZXhhbXM6IHVwZGF0ZWRFeGFtcyB9KTtcbiAgICBcbiAgICAvLyBTYXZlIHRvIEZpcmViYXNlIGltbWVkaWF0ZWx5XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgc2F2ZUV4YW1zVG9GaXJlYmFzZSh1c2VySWQsIHVwZGF0ZWRFeGFtcyk7XG4gICAgfVxuICAgIGdldCgpLnNhdmVVc2VyRGF0YSgpO1xuICB9LFxuICBzYXZlVGltZXRhYmxlU2Vzc2lvbnM6IGFzeW5jIChzZXNzaW9ucykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5OFIFNhdmluZyB0aW1ldGFibGUgc2Vzc2lvbnMgdG8gc3RvcmU6Jywgc2Vzc2lvbnMpO1xuICAgIHNldCh7IHRpbWV0YWJsZTogc2Vzc2lvbnMgfSk7XG4gICAgY29uc29sZS5sb2coJ/Cfkr4gQ2FsbGluZyBzYXZlVXNlckRhdGEgZm9yIHRpbWV0YWJsZS4uLicpO1xuICAgIGF3YWl0IHNhdmVUaW1ldGFibGVUb0ZpcmViYXNlKGdldCgpLnVzZXJJZCEsIHNlc3Npb25zKTtcbiAgICBjb25zb2xlLmxvZygn4pyFIFRpbWV0YWJsZSBzZXNzaW9ucyBzYXZlZCB0byBGaXJlYmFzZScpO1xuICB9LFxuICBsb2FkVXNlckRhdGE6IGFzeW5jICh1c2VySWQpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJz09PSBMT0FEIFVTRVIgREFUQSA9PT0nKTtcbiAgICAgIGNvbnNvbGUubG9nKCdVc2VyIElEOicsIHVzZXJJZCk7XG4gICAgICBzZXQoeyBpc0xvYWRpbmc6IHRydWUgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHVzZXJQcm9maWxlID0gYXdhaXQgZ2V0VXNlclByb2ZpbGUodXNlcklkKTtcbiAgICAgIGlmICh1c2VyUHJvZmlsZSkge1xuICAgICAgICBjb25zb2xlLmxvZygn4pyFIFVzZXIgcHJvZmlsZSBmb3VuZDonLCB1c2VyUHJvZmlsZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQcm9maWxlIGRhdGE6Jywge1xuICAgICAgICAgIHhwOiB1c2VyUHJvZmlsZS54cCxcbiAgICAgICAgICBsZXZlbDogdXNlclByb2ZpbGUubGV2ZWwsXG4gICAgICAgICAgbWlzc2lvbnM6IHVzZXJQcm9maWxlLm1pc3Npb25zPy5sZW5ndGggfHwgMCxcbiAgICAgICAgICBhY2hpZXZlbWVudHM6IHVzZXJQcm9maWxlLmFjaGlldmVtZW50cz8ubGVuZ3RoIHx8IDBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGdWxsIHVzZXIgcHJvZmlsZSBkYXRhOicsIHtcbiAgICAgICAgICB4cDogdXNlclByb2ZpbGUueHAsXG4gICAgICAgICAgbGV2ZWw6IHVzZXJQcm9maWxlLmxldmVsLFxuICAgICAgICAgIHN0cmVhazogdXNlclByb2ZpbGUuc3RyZWFrLFxuICAgICAgICAgIG1pc3Npb25zOiB1c2VyUHJvZmlsZS5taXNzaW9ucyxcbiAgICAgICAgICBhY2hpZXZlbWVudHM6IHVzZXJQcm9maWxlLmFjaGlldmVtZW50cyxcbiAgICAgICAgICBwb3dlclVwczogdXNlclByb2ZpbGUucG93ZXJVcHNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsb2FkZWREYXRhID0ge1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB4cDogdXNlclByb2ZpbGUueHAgIT09IHVuZGVmaW5lZCA/IHVzZXJQcm9maWxlLnhwIDogMCxcbiAgICAgICAgICBsZXZlbDogdXNlclByb2ZpbGUubGV2ZWwgIT09IHVuZGVmaW5lZCA/IHVzZXJQcm9maWxlLmxldmVsIDogMSxcbiAgICAgICAgICBzdHJlYWs6IHVzZXJQcm9maWxlLnN0cmVhayAhPT0gdW5kZWZpbmVkID8gdXNlclByb2ZpbGUuc3RyZWFrIDogMCxcbiAgICAgICAgICBwb3dlclVwczogdXNlclByb2ZpbGUucG93ZXJVcHMgfHwgZ2V0KCkucG93ZXJVcHMsXG4gICAgICAgICAgYWNoaWV2ZW1lbnRzOiB1c2VyUHJvZmlsZS5hY2hpZXZlbWVudHMgfHwgZ2V0KCkuYWNoaWV2ZW1lbnRzLFxuICAgICAgICAgIG1pc3Npb25zOiB1c2VyUHJvZmlsZS5taXNzaW9ucyB8fCBbXSxcbiAgICAgICAgICBleGFtczogdXNlclByb2ZpbGUuZXhhbXMgfHwgW10sXG4gICAgICAgICAgdGltZXRhYmxlOiB1c2VyUHJvZmlsZS50aW1ldGFibGUgfHwgW10sXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ0Fib3V0IHRvIHNldCBnYW1lIHN0b3JlIHdpdGggZGF0YTonLCBsb2FkZWREYXRhKTtcbiAgICAgICAgc2V0KGxvYWRlZERhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygn4pyFIFVzZXIgZGF0YSBsb2FkZWQgc3VjY2Vzc2Z1bGx5IGZvcjonLCB1c2VySWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KdjCBObyB1c2VyIHByb2ZpbGUgZm91bmQsIGluaXRpYWxpemluZyBuZXcgdXNlcicpO1xuICAgICAgICAvLyBJbml0aWFsaXplIG5ldyB1c2VyIHdpdGggZGVmYXVsdCBkYXRhXG4gICAgICAgIHNldCh7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHhwOiAwLFxuICAgICAgICAgIGxldmVsOiAxLFxuICAgICAgICAgIHN0cmVhazogMCxcbiAgICAgICAgICBtaXNzaW9uczogW10sXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBOZXcgdXNlciBpbml0aWFsaXplZCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBsb2FkaW5nIHVzZXIgZGF0YTonLCBlcnJvcik7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZXRhaWxzOicsIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrXG4gICAgICB9KTtcbiAgICAgIHNldCh7IGlzTG9hZGluZzogZmFsc2UgfSk7XG4gICAgfVxuICB9LFxuICBzYXZlVXNlckRhdGE6IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHVzZXJJZCwgeHAsIGxldmVsLCBzdHJlYWssIHBvd2VyVXBzLCBhY2hpZXZlbWVudHMsIG1pc3Npb25zLCBleGFtcywgdGltZXRhYmxlIH0gPSBnZXQoKTtcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZygnPT09IFNBVkUgVVNFUiBEQVRBID09PScpO1xuICAgICAgICBjb25zb2xlLmxvZygnVXNlciBJRDonLCB1c2VySWQpO1xuICAgICAgICBjb25zb2xlLmxvZygnRGF0YSB0byBzYXZlOicsIHsgXG4gICAgICAgICAgeHAsIFxuICAgICAgICAgIGxldmVsLCBcbiAgICAgICAgICBzdHJlYWssIFxuICAgICAgICAgIG1pc3Npb25zQ291bnQ6IG1pc3Npb25zLmxlbmd0aCxcbiAgICAgICAgICBhY2hpZXZlbWVudHNDb3VudDogYWNoaWV2ZW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBwb3dlclVwc0NvdW50OiBwb3dlclVwcy5sZW5ndGhcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGdWxsIG1pc3Npb25zIGFycmF5OicsIG1pc3Npb25zKTtcbiAgICAgICAgY29uc29sZS5sb2coJ0Z1bGwgYWNoaWV2ZW1lbnRzIGFycmF5OicsIGFjaGlldmVtZW50cyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGdWxsIHBvd2VyVXBzIGFycmF5OicsIHBvd2VyVXBzKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRhdGFUb1NhdmUgPSB7XG4gICAgICAgICAgeHAsXG4gICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgc3RyZWFrLFxuICAgICAgICAgIHBvd2VyVXBzLFxuICAgICAgICAgIGFjaGlldmVtZW50cyxcbiAgICAgICAgICBtaXNzaW9ucyxcbiAgICAgICAgICBleGFtcyxcbiAgICAgICAgICB0aW1ldGFibGVcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdBYm91dCB0byBzYXZlIHRoaXMgZGF0YTonLCBkYXRhVG9TYXZlKTtcbiAgICAgICAgYXdhaXQgdXBkYXRlVXNlclByb2ZpbGUodXNlcklkLCBkYXRhVG9TYXZlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBVc2VyIGRhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5IGZvcjonLCB1c2VySWQpO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3Igc2F2aW5nIHVzZXIgZGF0YTonLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRldGFpbHM6Jywge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gTm8gdXNlciBJRCwgc2tpcHBpbmcgc2F2ZScpO1xuICAgIH1cbiAgfSxcbiAgcmVzZXRVc2VyRGF0YTogKCkgPT4ge1xuICAgIHNldCh7XG4gICAgICB1c2VySWQ6IG51bGwsXG4gICAgICB4cDogMCxcbiAgICAgIGxldmVsOiAxLFxuICAgICAgc3RyZWFrOiAwLFxuICAgICAgbWlzc2lvbnM6IFtdLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgIH0pO1xuICB9LFxufSkpOyAiXSwibmFtZXMiOlsiY3JlYXRlIiwiZ2V0VXNlclByb2ZpbGUiLCJ1cGRhdGVVc2VyUHJvZmlsZSIsInNhdmVUaW1ldGFibGVTZXNzaW9ucyIsInNhdmVUaW1ldGFibGVUb0ZpcmViYXNlIiwic2F2ZUV4YW1zIiwic2F2ZUV4YW1zVG9GaXJlYmFzZSIsInVzZUdhbWVTdG9yZSIsInNldCIsImdldCIsInVzZXJJZCIsInhwIiwibGV2ZWwiLCJzdHJlYWsiLCJpc0xvYWRpbmciLCJwb3dlclVwcyIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZWZmZWN0IiwiY29vbGRvd24iLCJsYXN0VXNlZCIsImFjdGl2ZSIsImFjaGlldmVtZW50cyIsImljb24iLCJ1bmxvY2tlZCIsIm1pc3Npb25zIiwiZXhhbXMiLCJ0aW1ldGFibGUiLCJzZXRVc2VySWQiLCJjdXJyZW50VXNlcklkIiwiY29uc29sZSIsImxvZyIsInNhdmVVc2VyRGF0YSIsImxvYWRVc2VyRGF0YSIsInNldFhQIiwiYWRkWFAiLCJhbW91bnQiLCJuZXdYUCIsIm5ld0xldmVsIiwiTWF0aCIsImZsb29yIiwic2V0TGV2ZWwiLCJzZXRTdHJlYWsiLCJhY3RpdmF0ZVBvd2VyVXAiLCJwb3dlclVwSWQiLCJ1cGRhdGVkUG93ZXJVcHMiLCJtYXAiLCJwb3dlclVwIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidW5sb2NrQWNoaWV2ZW1lbnQiLCJhY2hpZXZlbWVudElkIiwidXBkYXRlZEFjaGlldmVtZW50cyIsImFjaGlldmVtZW50IiwidW5sb2NrZWRBdCIsImFkZE1pc3Npb24iLCJtaXNzaW9uIiwiY2FsY3VsYXRlWFAiLCJkdXJhdGlvbiIsInByaW9yaXR5IiwiYmFzZVhQIiwicHJpb3JpdHlNdWx0aXBsaWVyIiwicm91bmQiLCJuZXdNaXNzaW9uIiwibm93IiwidG9TdHJpbmciLCJ4cFZhbHVlIiwiY3JlYXRlZEF0IiwiY29tcGxldGVNaXNzaW9uIiwibWlzc2lvbklkIiwidXBkYXRlZE1pc3Npb25zIiwiY29tcGxldGVkIiwidGl0bGUiLCJjb21wbGV0ZWRNaXNzaW9ucyIsImZpbHRlciIsIm0iLCJsZW5ndGgiLCJjb21wbGV0ZWRBdCIsImRlbGV0ZU1pc3Npb24iLCJzdGFydFRpbWVyIiwidGltZXJBY3RpdmUiLCJ0aW1lclN0YXJ0VGltZSIsInRpbWVSZW1haW5pbmciLCJzdG9wVGltZXIiLCJzdGFydFRpbWUiLCJjdXJyZW50VGltZSIsImVsYXBzZWRTZWNvbmRzIiwiZ2V0VGltZSIsInJlbWFpbmluZ1NlY29uZHMiLCJtYXgiLCJyZW1haW5pbmdNaW51dGVzIiwiY2hlY2tEZWFkbGluZXMiLCJoYXNPdmVyZHVlTWlzc2lvbnMiLCJvdmVyZHVlIiwiZGVhZGxpbmUiLCJwZW5hbHR5Iiwid2luZG93IiwiTm90aWZpY2F0aW9uIiwicGVybWlzc2lvbiIsImJvZHkiLCJhZGRFeGFtIiwiZXhhbSIsIm5ld0V4YW0iLCJ1cGRhdGVkRXhhbXMiLCJkZWxldGVFeGFtIiwiZXhhbUlkIiwic2Vzc2lvbnMiLCJ1c2VyUHJvZmlsZSIsImxvYWRlZERhdGEiLCJ1bmRlZmluZWQiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwic3RhY2siLCJtaXNzaW9uc0NvdW50IiwiYWNoaWV2ZW1lbnRzQ291bnQiLCJwb3dlclVwc0NvdW50IiwiZGF0YVRvU2F2ZSIsInJlc2V0VXNlckRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/gameStore.ts\n"));

/***/ })

});